ScriptArgument	(Name, Argument Type, IsOptional, DefaultValue)
ScriptCommand	(Command, SubCommand, ScriptArgument, Description, ArgumentSeparator, IsConstruct)
ScriptCommand	(Command, SubCommand, returnType, ScriptArgument, Description, ArgumentSeparator, IsConstruct)

Private Shared Sub DoBattle()
ScriptCommand("battle", "starttrainer", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "")}), "Initializes a trainer interaction and checks if the player has already beaten that trainer.", ",", False))
ScriptCommand("battle", "trainer", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "")}), "Initializes a trainer battle.", ",", False))
ScriptCommand("battle", "wild", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonData", ArgumentTypes.PokemonData, False, ""), New ScriptArgument("musicloop", ArgumentTypes.Str, True, "")}), "Initializes the battle with a wild Pokémon.", ",", False))
ScriptCommand("battle", "wild", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("shiny", ArgumentTypes.Int, True, "-1"), New ScriptArgument("musicloop", ArgumentTypes.Str, True, ""), New ScriptArgument("introtype", ArgumentTypes.Int, True, "0-10")}), "Initializes the battle with a wild Pokémon.", ",", False))
ScriptCommand("battle", "setvar", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("varName", ArgumentTypes.Str, False, ""), New ScriptArgument("varValue", ArgumentTypes.Str, False, "")}), "Sets a battle value. Valid arguments for "varName": canrun,cancatch,canblackout,canreceiveexp,canuseitems,frontiertrainer,divebattle,inversebattle", ",", False))
ScriptCommand("battle", "defeatmessage", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "")}), "Returns the defeat message of the trainer loaded from the given "trainerFile".", ",", True))
ScriptCommand("battle", "intromessage", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "")}), "Returns the intro message of the trainer loaded from the given "trainerFile".", ",", True))
ScriptCommand("battle", "outromessage", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "")}), "Returns the outro message of the trainer loaded from the given "trainerFile".", ",", True))
ScriptCommand("battle", "won", "bool", "Returns "true" if the player won the last battle. Returns "false" otherwise.", ",", True))
End Sub
Private Shared Sub DoCamera()
ScriptCommand("camera", "set", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, ""), New ScriptArgument("yaw", ArgumentTypes.Sng, False, ""), New ScriptArgument("pitch", ArgumentTypes.Sng, False, "")}), "Sets the given properties of the camera.", ",", False))
ScriptCommand("camera", "reset", "Resets the camera to the default setting."))
ScriptCommand("camera", "setyaw", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("yaw", ArgumentTypes.Sng, False, "")}), "Sets the Yaw property of the camera.", ",", False))
ScriptCommand("camera", "setpitch", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pitch", ArgumentTypes.Sng, False, "")}), "Sets the Pitch property of the camera.", ",", False))
ScriptCommand("camera", "setposition", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Sets the Position property of the camera.", ",", False))
ScriptCommand("camera", "setx", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("x", ArgumentTypes.Sng, False, "")}), "Sets the X Position property of the camera.", ",", False))
ScriptCommand("camera", "setx", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("y", ArgumentTypes.Sng, False, "")}), "Sets the Y Position property of the camera.", ",", False))
ScriptCommand("camera", "setx", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Sets the Z Position property of the camera.", ",", False))
ScriptCommand("camera", "togglethirdperson", "Toggles the third person camera."))
ScriptCommand("camera", "activatethirdperson", "Activates the third person camera."))
ScriptCommand("camera", "deactivatethirdperson", "Deactivates the third person camera."))
ScriptCommand("camera", "fix", "Fixes the camera to the current position."))
ScriptCommand("camera", "defix", "Defixes the camera so that it clips behind the player again."))
ScriptCommand("camera", "togglefix", "Sets the fix state of the camera to the opposite of the current state."))
ScriptCommand("camera", "isfixed", "bool", "Returns if the camera is fixed to a specific position.", True))
ScriptCommand("camera", "x", "sng", "Returns the current x position of the camera.", True))
ScriptCommand("camera", "y", "sng", "Returns the current y position of the camera.", True))
ScriptCommand("camera", "z", "sng", "Returns the current z position of the camera.", True))
End Sub
Private Shared Sub DoChat()
ScriptCommand("chat", "clear", "Clears the chat."))
End Sub
Private Shared Sub DoDaycare()
ScriptCommand("daycare", "takeegg", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, "")}), "Removes the egg from the daycare and adds it to the player's party.", ",", False))
ScriptCommand("daycare", "takepokemon", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Takes a Pokémon from the daycare to the player's party.", ",", False))
ScriptCommand("daycare", "leavepokemon", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("PokemonDaycareIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Removes a Pokémon from the player's party and fills the given PokemonDaycareIndex with that Pokémon.", ",", False))
ScriptCommand("daycare", "removeegg", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, "")}), "Removes the egg from the daycare.", ",", False))
ScriptCommand("daycare", "clean", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, "")}), "Cleans all data for the given daycare. This doesn't remove the data, just rearranges it.", ",", False))
ScriptCommand("daycare", "call", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, "")}), "Initializes a call with the daycare. This checks if the daycare is registered in the Pokégear.", ",", False))
ScriptCommand("daycare", "cleardata", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, "")}), "Clears all the data for one daycare. That includes the Pokémon stored there and a potetial egg.", ",", False))
ScriptCommand("daycare", "pokemonID", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Pokémon ID of a Pokémon in the daycare.", ",", True))
ScriptCommand("daycare", "pokemonName", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the name of a Pokémon in the daycare.", ",", True))
ScriptCommand("daycare", "pokemonSprite", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the sprite of a Pokémon in the daycare.", ",", True))
ScriptCommand("daycare", "shinyIndicator", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Shiny Indicator of a Pokémon in the daycare (either "N" or "S").", ",", True))
ScriptCommand("daycare", "countpokemon", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, "")}), "Returns the amount of Pokémon in the daycare.", ",", True))
ScriptCommand("daycare", "haspokemon", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Pokémon ID of a Pokémon in the daycare.", ",", True))
ScriptCommand("daycare", "canswim", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns if the Pokémon in the daycare can swim.", ",", True))
ScriptCommand("daycare", "hasegg", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, "")}), "Returns if the daycare has an egg.", ",", True))
ScriptCommand("daycare", "grownlevels", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the amount of levels the Pokémon has grown in the daycare.", ",", True))
ScriptCommand("daycare", "currentlevel", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the current level of the Pokémon in the daycare.", ",", True))
ScriptCommand("daycare", "canbreed", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the chance the Pokémon in the daycare can breed (in %).", ",", True))
End Sub
Private Shared Sub DoEntity()
ScriptCommand("entity", "showmessagebulb", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("bulbID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Displays a message bulb in the world. Valid arguments for "bulbID": 0-11", "|", False))
ScriptCommand("entity", "warp", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Warps the entity to a new location on the map.", ",", False))
ScriptCommand("entity", "scale", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("xS", ArgumentTypes.Sng, False, ""), New ScriptArgument("yS", ArgumentTypes.Sng, False, ""), New ScriptArgument("zS", ArgumentTypes.Sng, False, "")}), "Changes the Scale property of the selected entity.", ",", False))
ScriptCommand("entity", "remove", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Removes the entity from the map once it updates.", ",", False))
ScriptCommand("entity", "setid", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("newID", ArgumentTypes.Int, False, "")}), "Sets the entity ID of the selected entity to a new ID.", ",", False))
ScriptCommand("entity", "setopacity", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("opacity", ArgumentTypes.Int, False, "")}), "Sets the Opacity property of the selected entity. "opacity" in %.", ",", False))
ScriptCommand("entity", "setvisible", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("visible", ArgumentTypes.Bool, False, "")}), "Sets the Visible property of the selected entity.", ",", False))
ScriptCommand("entity", "setadditionalvalue", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("additionalValue", ArgumentTypes.Str, False, "")}), "Sets the AdditionalValue property of the selected entity.", ",", False))
ScriptCommand("entity", "setcollision", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("collision", ArgumentTypes.Bool, False, "")}), "Sets the Collision property of the selected entity.", ",", False))
ScriptCommand("entity", "settetxure", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("textureIndex", ArgumentTypes.Str, False, ""), New ScriptArgument("textureName", ArgumentTypes.Str, False, ""), New ScriptArgument("rX", ArgumentTypes.Int, False, ""), New ScriptArgument("rY", ArgumentTypes.Int, False, ""), New ScriptArgument("rWidth", ArgumentTypes.Int, False, ""), New ScriptArgument("rHeight", ArgumentTypes.Int, False, "")}), "Sets the texture in the selected entity's texture array. Argument example: 0,0,[nilllzz,0,10,32,32]", ",", False))
ScriptCommand("entity", "addtoposition", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Adds the given coordinates to the position of the given entity.", ",", False))
ScriptCommand("entity", "visible", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns if the selected entity is visible.", ",", True))
ScriptCommand("entity", "opacity", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns the opacity property of the selected entity.", ",", True))
ScriptCommand("entity", "position", "sngArr", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns the position of the selected entity in the pattern "x,y,z".", ",", True))
ScriptCommand("entity", "positionx", "sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns the X position of the selected entity.", ",", True))
ScriptCommand("entity", "positiony", "sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns the Y position of the selected entity.", ",", True))
ScriptCommand("entity", "positionz", "sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns the Z position of the selected entity.", ",", True))
ScriptCommand("entity", "scale", "sngArr", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns the scale of the selected entity in the pattern "x,y,z".", ",", True))
ScriptCommand("entity", "additionalvalue", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns the additional value of the selected entity.", ",", True))
ScriptCommand("entity", "collision", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("entityID", ArgumentTypes.Int, False, "")}), "Returns the collision property of the selected entity.", ",", True))
End Sub
Private Shared Sub DoEnvironment()
ScriptCommand("environment", "setweather", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("weatherID", ArgumentTypes.Int, False, "")}), "Changes the weather of the current map.", ",", False))
ScriptCommand("environment", "setregionweather", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("weatherID", ArgumentTypes.Int, False, "")}), "Changes the weather of the current region.", ",", False))
ScriptCommand("environment", "setcanfly", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("canfly", ArgumentTypes.Bool, False, "")}), "Sets the "CanFly" parameter of the current map.", ",", False))
ScriptCommand("environment", "setcandig", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("candig", ArgumentTypes.Bool, False, "")}), "Sets the "CanDig" parameter of the current map.", ",", False))
ScriptCommand("environment", "setcanteleport", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("canteleport", ArgumentTypes.Bool, False, "")}), "Sets the "CanTeleport" parameter of the current map.", ",", False))
ScriptCommand("environment", "setwildpokemongrass", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("canencounter", ArgumentTypes.Bool, False, "")}), "Sets the "WildPokemonGrass" parameter of the current map.", ",", False))
ScriptCommand("environment", "setwildpokemonwater", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("canencounter", ArgumentTypes.Bool, False, "")}), "Sets the "WildPokemonWater" parameter of the current map.", ",", False))
ScriptCommand("environment", "setwildpokemoneverywhere", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("canencounter", ArgumentTypes.Bool, False, "")}), "Sets the "WildPokemonEverywhere" parameter of the current map.", ",", False))
ScriptCommand("environment", "setisdark", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("isDark", ArgumentTypes.Bool, False, "")}), "Sets the "IsDark" parameter of the current map.", ",", False))
ScriptCommand("environment", "setrenderdistance", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("distance", ArgumentTypes.Int, False, "")}), "Sets the render distance. Valid arguments for "distance": 0-4,tiny,small,normal,far,extreme", ",", False))
ScriptCommand("environment", "toggledarkness", "Toggles the "IsDark" parameter of the current map."))
ScriptCommand("environment", "daytime", "str", "Returns the current DayTime of the game.", ",", True))
ScriptCommand("environment", "daytimeID", "int", "Returns the current DayTimeID of the game.", ",", True))
ScriptCommand("environment", "season", "str", "Returns the current Season of the game.", ",", True))
ScriptCommand("environment", "seasonID", "int", "Returns the current SeasonID of the game.", ",", True))
ScriptCommand("environment", "day", "str", "Returns the current day of the week.", ",", True))
ScriptCommand("environment", "dayofyear", "int", "Returns the current day of the year.", ",", True))
ScriptCommand("environment", "dayinformation", "str", "Returns the current day of the week and DayTime of the game.", ",", True))
ScriptCommand("environment", "week", "str", "Returns the current week of the year.", ",", True))
ScriptCommand("environment", "year", "str", "Returns the current year.", ",", True))
ScriptCommand("environment", "weather", "str", "Returns the Weather of the current map.", ",", True))
ScriptCommand("environment", "mapweather", "str", "Returns the Weather of the current map.", ",", True))
ScriptCommand("environment", "currentmapweather", "str", "Returns the Weather of the current map.", ",", True))
ScriptCommand("environment", "weatherid", "int", "Returns the WeatherID of the current map.", ",", True))
ScriptCommand("environment", "mapweatherid", "int", "Returns the WeatherID of the current map.", ",", True))
ScriptCommand("environment", "currentmapweatherid", "int", "Returns the WeatherID of the current map.", ",", True))
ScriptCommand("environment", "regionweather", "str", "Returns the Weather of the current region.", ",", True))
ScriptCommand("environment", "regionweatherid", "str", "Returns the WeatherID of the current region.", ",", True))
ScriptCommand("environment", "canfly", "bool", "Returns the "CanFly" parameter of the current map.", ",", True))
ScriptCommand("environment", "candig", "bool", "Returns the "CanDig" parameter of the current map.", ",", True))
ScriptCommand("environment", "canteleport", "bool", "Returns the "CanTeleport" parameter of the current map.", ",", True))
ScriptCommand("environment", "wildpokemongrass", "bool", "Returns the "WildPokemonGrass" parameter of the current map.", ",", True))
ScriptCommand("environment", "wildpokemonwater", "bool", "Returns the "WildPokemonWater" parameter of the current map.", ",", True))
ScriptCommand("environment", "wildpokemoneverywhere", "bool", "Returns the "WildPokemonEverywhere" parameter of the current map.", ",", True))
ScriptCommand("environment", "isdark", "bool", "Returns the "IsDark" parameter of the current map.", ",", True))
End Sub
Private Shared Sub DoInventory()
ScriptCommand("inventory", "countitem", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("itemID", ArgumentTypes.Int, False, "")}), "Returns the amount of the Item with the given ID in the player's inventory.", ",", True))
ScriptCommand("inventory", "countitems", "int", "Counts all items in the player's inventory.", ",", True))
ScriptCommand("inventory", "name", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("itemID", ArgumentTypes.Int, False, "")}), "Returns the name of an Item by its ItemID.", ",", True))
ScriptCommand("inventory", "ID", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("itemName", ArgumentTypes.Str, False, "")}), "Returns the ID of an Item by its Name.", ",", True))
End Sub
Private Shared Sub DoItem()
ScriptCommand("item", "give", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("ItemID", ArgumentTypes.Int, False, ""), New ScriptArgument("Amount", ArgumentTypes.Int, True, "1")}), "Adds the given amount of items to the player's inventory.", ",", False))
ScriptCommand("item", "remove", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("ItemID", ArgumentTypes.Int, False, ""), New ScriptArgument("Amount", ArgumentTypes.Int, True, "1"), New ScriptArgument("showMessage", ArgumentTypes.Bool, True, "true")}), "Removes the given amount of items from the player's inventory. Displays a message afterwards, if "showMessage" is true.", ",", False))
ScriptCommand("item", "clearitem", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("ItemID", ArgumentTypes.Int, True, "")}), "Clears all items with the given ID from the player's inventory. Clears the whole inventory if ItemID is empty.", ",", False))
ScriptCommand("item", "messagegive", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("ItemID", ArgumentTypes.Int, False, ""), New ScriptArgument("Amount", ArgumentTypes.Int, True, "1")}), "Displays a message for getting the specified amount of items.", ",", False))
ScriptCommand("item", "repel", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("RepelItemID", ArgumentTypes.Int, False, "")}), "Adds the steps of the repel to the repel steps of the player. Valid arguments for "RepelItemID": 20,42,43", ",", False))
End Sub
Private Shared Sub DoLevel()
ScriptCommand("level", "wait", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("ticks", ArgumentTypes.Int, False, "")}), "Makes the level idle for the duration of the given ticks.", ",", False))
ScriptCommand("level", "update", "Updates the level and all entities once."))
ScriptCommand("level", "waitforevents", "Makes the level idle until every NPC movement is done."))
ScriptCommand("level", "waitforsave", "Makes the level idle until the current saving of an GameJolt save is done."))
ScriptCommand("level", "reload", "Reloads the current map."))
ScriptCommand("level", "setsafari", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("safari", ArgumentTypes.Bool, False, "")}), "Sets if the current map is a Safari Zone (influences battle style).", ",", False))
ScriptCommand("level", "mapfile", "str", "Returns the mapfile of the currently loaded map.", ",", True))
ScriptCommand("level", "levelfile", "str", "Returns the mapfile of the currently loaded map.", ",", True))
ScriptCommand("level", "filename", "str", "Returns only the name of the current map file, without path and extension.", ",", True))
ScriptCommand("level", "riding", "bool", "Returns if the player is riding a Pokémon right now.", ",", True))
ScriptCommand("level", "surfing", "bool", "Returns if the player is suring on a Pokémon right now.", ",", True))
End Sub
Private Shared Sub DoMath()
ScriptCommand("math", "int", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Converts the argument to an integer.", "", True))
ScriptCommand("math", "sng", "sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Converts the argument to a single.", "", True))
ScriptCommand("math", "abs", "sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Sng, False, "")}), "Returns the absolute value of a number.", "", True))
ScriptCommand("math", "ceiling", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Sng, False, "")}), "Rounds the value up to the next integer.", "", True))
ScriptCommand("math", "floor", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Sng, False, "")}), "Rounds the value down to the next integer.", "", True))
ScriptCommand("math", "isint", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Checks if the expression is an integer.", "", True))
ScriptCommand("math", "issng", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Checks if the expression is a single.", "", True))
End Sub
Private Shared Sub DoMusic()
ScriptCommand("music", "play", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("musicFile", ArgumentTypes.Str, False, "")}), "Changes the currently playing music to a new one.", ",", False))
ScriptCommand("music", "setmusicloop", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("musicFile", ArgumentTypes.Str, False, "")}), "Sets the map musicloop to a new musicfile.", ",", False))
ScriptCommand("music", "stop", "Stops the music playback."))
ScriptCommand("music", "pause", "Pauses the music playback."))
ScriptCommand("music", "resume", "Resumes the music playback."))
End Sub
Private Shared Sub DoNPC()
ScriptCommand("npc", "remove", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Removes the selected NPC from the map.", ",", False))
ScriptCommand("npc", "position", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Moves the selected NPC to a different place on the map. To get relative coordinates, enter a "~".", ",", False))
ScriptCommand("npc", "warp", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Moves the selected NPC to a different place on the map. To get relative coordinates, enter a "~".", ",", False))
ScriptCommand("npc", "addtoposition", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Adds the given coordinates to the position of the given NPC. To get relative coordinates, enter a "~".", ",", False))
ScriptCommand("npc", "register", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("registerData", ArgumentTypes.Str, False, "")}), "Registers NPC data. Format: {MapFile|NPCID|Action("position","remove")|addition)", ",", False))
ScriptCommand("npc", "unregister", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("registerData", ArgumentTypes.Str, False, "")}), "Unregisters NPC data. Format: {MapFile|NPCID|Action("position","remove")|addition)", ",", False))
ScriptCommand("npc", "wearskin", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("skin", ArgumentTypes.Str, False, "")}), "Sets the skin of the selected NPC.", ",", False))
ScriptCommand("npc", "move", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("steps", ArgumentTypes.Int, False, "")}), "Starts NPC movement of the selected NPC.", ",", False))
ScriptCommand("npc", "setMoveY", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("steps", ArgumentTypes.Int, False, "")}), "Sets the steps the selected NPC should walk in the Y direction.", ",", False))
ScriptCommand("npc", "moveasync", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("steps", ArgumentTypes.Int, False, "")}), "Starts async NPC movement of the selected NPC.", ",", False))
ScriptCommand("npc", "turn", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("facing", ArgumentTypes.Int, False, "")}), "Sets the face direction of the selected NPC.", ",", False))
ScriptCommand("npc", "spawn", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, ""), New ScriptArgument("actionValue", ArgumentTypes.Int, True, "0"), New ScriptArgument("additionalValue", ArgumentTypes.Str, True, ""), New ScriptArgument("TextureID", ArgumentTypes.Str, True, "0"), New ScriptArgument("AnimateIdle", ArgumentTypes.Bool, True, "false"), New ScriptArgument("Rotation", ArgumentTypes.Int, True, "0"), New ScriptArgument("Name", ArgumentTypes.Str, True, ""), New ScriptArgument("npcID", ArgumentTypes.Int, True, "0"), New ScriptArgument("Movement", ArgumentTypes.Str, True, "Still")}), "Spawns a new NPC with the given conditions. Valid arguments for "Movement": Pokeball,Still,Looking,FacePlayer,Walk,Straight,Turning", ",", False))
ScriptCommand("npc", "setspeed", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("speed", ArgumentTypes.Sng, False, "")}), "Sets the speed of an NPC. The default is "1".", ",", False))
ScriptCommand("npc", "position", "sngArr", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the position of the selected NPC.", ",", True))
ScriptCommand("npc", "exists", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns if an NPC with the given ID exists on the map.", ",", True))
ScriptCommand("npc", "ismoving", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns if the selected NPC is moving.", ",", True))
ScriptCommand("npc", "moved", "sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the amount of steps the selected NPC still has to move.", ",", True))
ScriptCommand("npc", "skin", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the skin of the selected NPC.", ",", True))
ScriptCommand("npc", "facing", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the direction the selected NPC is facing.", ",", True))
ScriptCommand("npc", "ID", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the NPC ID for the selected NPC.", ",", True))
ScriptCommand("npc", "name", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the name of the selected NPC.", ",", True))
ScriptCommand("npc", "action", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the action value of the selected NPC.", ",", True))
ScriptCommand("npc", "additionalvalue", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the additional value of the selected NPC.", ",", True))
ScriptCommand("npc", "movement", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns the movement type of the selected NPC.", ",", True))
ScriptCommand("npc", "hasmoverectangles", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("npcID", ArgumentTypes.Int, False, "")}), "Returns if the selected NPC has any movement rectangles.", ",", True))
ScriptCommand("npc", "trainertexture", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("trainerfile", ArgumentTypes.Str, False, "")}), "Returns the texture name of the given trainer. Trainer file starts at the "Trainer\" path and must not have the ".trainer" extension.", ",", True))
End Sub
Private Shared Sub DoOptions()
ScriptCommand("options", "show", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("options", ArgumentTypes.StrArr, False, ""), New ScriptArgument("flag", ArgumentTypes.Str, True, "")}), "Displays a choose box with the given options. Valid Arguments for "flag": [TEXT=FALSE]", ",", False))
ScriptCommand("options", "setcancelindex", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("index", ArgumentTypes.Int, False, "")}), "Sets the cancel index of the next choose box. This index gets choosen when the player presses a back key.", ",", False))
End Sub
Private Shared Sub DoPhone()
ScriptCommand("phone", "callflag", "str", "Returns, if the Pokégear is calling or getting called. Values: "calling", "receiving"", ",", True))
ScriptCommand("phone", "got", "bool", "Returns if the player got the Pokégear.", ",", True))
End Sub
Private Shared Sub DoPlayer()
ScriptCommand("player", "receivepokedex", "Makes the Pokédex accessible for the player."))
ScriptCommand("player", "receivepokegear", "Makes the Pokégear accessible for the player."))
ScriptCommand("player", "renamerivel", "Opens the rival rename screen."))
ScriptCommand("player", "wearskin", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("skin", ArgumentTypes.Str, False, "")}), "Changes the player skin.", ",", False))
ScriptCommand("player", "setonlineskin", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("gamejoltID", ArgumentTypes.Str, False, "")}), "Changes the player skin to a skin downloaded for the GameJoltID.", ",", False))
ScriptCommand("player", "move", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("steps", ArgumentTypes.Sng, False, "")}), "Starts the player movement.", ",", False))
ScriptCommand("player", "moveasync", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("steps", ArgumentTypes.Str, False, "")}), "Starts the async player movement.", ",", False))
ScriptCommand("player", "turn", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("turns", ArgumentTypes.Int, False, "")}), "Adds to the direction the player faces and starts the turning.", ",", False))
ScriptCommand("player", "turnasync", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("turns", ArgumentTypes.Int, False, "")}), "Adds to the direction the player faces and starts the async turning.", ",", False))
ScriptCommand("player", "turnto", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("facing", ArgumentTypes.Int, False, "")}), "Changes the direction the player faces and starts the turning.", ",", False))
ScriptCommand("player", "turntoasync", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("facing", ArgumentTypes.Int, False, "")}), "Changes the direction the player faces and starts the async turning.", ",", False))
ScriptCommand("player", "warp", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("mapfile", ArgumentTypes.Str, False, "")}), "Warps the player to a new map file.", ",", False))
ScriptCommand("player", "warp", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Warps the player to a new location on the map. To get relative coordinates, enter a "~".", ",", False))
ScriptCommand("player", "warp", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("mapfile", ArgumentTypes.Str, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "")}), "Warps the player to a new location on a new map. To get relative coordinates, enter a "~".", ",", False))
ScriptCommand("player", "warp", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("mapfile", ArgumentTypes.Str, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, ""), New ScriptArgument("facing", ArgumentTypes.Int, False, "")}), "Warps the player to a new location on a new map and changes the facing afterwards. To get relative coordinates, enter a "~".", ",", False))
ScriptCommand("player", "stopmovement", "Stops the player movement."))
ScriptCommand("player", "addmoney", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("amount", ArgumentTypes.Int, False, "")}), "Adds the given amount to the player's money.", ",", False))
ScriptCommand("player", "setmovement", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("x", ArgumentTypes.Int, False, ""), New ScriptArgument("y", ArgumentTypes.Int, False, ""), New ScriptArgument("z", ArgumentTypes.Int, False, "")}), "Sets the direction the player will move next regardless of facing.", ",", False))
ScriptCommand("player", "resetmovement", "Resets the player movement to the default movement directions."))
ScriptCommand("player", "getbadge", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("badgeID", ArgumentTypes.Int, False, "")}), "Adds the given badge to the player's badges and displays a message.", ",", False))
ScriptCommand("player", "achieveemblem", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("emblemName", ArgumentTypes.Str, False, "")}), "Makes the player achieve an emblem (GameJolt only).", ",", False))
ScriptCommand("player", "addbp", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("amount", ArgumentTypes.Int, False, "")}), "Adds the given amount to the player's BattlePoints.", ",", False))
ScriptCommand("player", "showrod", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("rodID", ArgumentTypes.Int, False, "")}), "Displays a rod on the screen. Valid arguments for "rodID": 0-2", ",", False))
ScriptCommand("player", "hiderod", "Hides the fishing rod."))
ScriptCommand("player", "showpokemonfollow", "Shows up the following Pokémon."))
ScriptCommand("player", "hidepokemonfollow", "Hides the following Pokémon."))
ScriptCommand("player", "togglepokemonfollow", "Toggles the following Pokémon's visibility."))
ScriptCommand("player", "save", "Saves the game."))
ScriptCommand("player", "setrivalname", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, "")}), "Sets the rival's name.", ",", False))
ScriptCommand("player", "position", "sngarr", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("coordinate", ArgumentTypes.StrArr, True, "")}), "Returns the position of the player. The normal coordinate combination is "x,y,z". Valid arguments for "coordinate": x,y,z", ",", True))
ScriptCommand("player", "hasbadge", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("badgeID", ArgumentTypes.Int, False, "")}), "Returns if the player owns a specific badge.", ",", True))
ScriptCommand("player", "skin", "str", "Returns the current skin the player wears.", ",", True))
ScriptCommand("player", "velocity", "sng", "Returns the player's velocity (steps until the player movement ends).", ",", True))
ScriptCommand("player", "ismoving", "bool", "Returns if the player moves.", ",", True))
ScriptCommand("player", "facing", "int", "Returns the direction the player is facing.", ",", True))
ScriptCommand("player", "compass", "str", "Returns "north", "east", "south" or "east" depending on the direction the player is facing.", ",", True))
ScriptCommand("player", "money", "int", "Returns the player's money.", ",", True))
ScriptCommand("player", "name", "str", "Returns the player's name", ",", True))
ScriptCommand("player", "gender", "int", "Returns the player's gender (0=male, 1=female)", ",", True))
ScriptCommand("player", "bp", "int", "Returns the amount of BattlePoints the player owns.", ",", True))
ScriptCommand("player", "badges", "int", "Returns the amount of badges the player owns", ",", True))
ScriptCommand("player", "thirdperson", "bool", "Returns if the game is currently played in third person.", ",", True))
ScriptCommand("player", "rival", "str", "Returns the rival's name.", ",", True))
ScriptCommand("player", "rivalname", "str", "Returns the rival's name.", ",", True))
ScriptCommand("player", "ot", "str", "Returns the player's OT.", ",", True))
ScriptCommand("player", "gamejoltid", "str", "Returns the player's GameJoltID.", ",", True))
End Sub
Private Shared Sub DoPokedex()
ScriptCommand("pokedex", "setautodetect", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("autodetect", ArgumentTypes.Bool, False, "")}), "Sets if the Pokédex registers seen Pokémon in wild or trainer battles.", ",", False))
ScriptCommand("pokedex", "caught", "int", "Returns the amount of Pokémon registered as caught by the player.", "", True))
ScriptCommand("pokedex", "seen", "int", "Returns the amount of Pokémon registered as seen by the player.", "", True))
ScriptCommand("pokedex", "shiny", "int", "Returns the amount of Pokémon registered as shiny by the player.", "", True))
End Sub
Private Shared Sub DoPokemon()
ScriptCommand("pokemon", "cry", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonID", ArgumentTypes.Int, False, "")}), "Plays the cry of the given Pokémon.", ",", False))
ScriptCommand("pokemon", "remove", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Removes the Pokémon at the given party index.", ",", False))
ScriptCommand("pokemon", "add", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonData", ArgumentTypes.PokemonData, False, "")}), "Adds the Pokémon to the player's party.", ",", False))
ScriptCommand("pokemon", "add", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("method", ArgumentTypes.Str, True, "random reason"), New ScriptArgument("ballID", ArgumentTypes.Int, True, "5"), New ScriptArgument("location", ArgumentTypes.Str, True, "Current location"), New ScriptArgument("isEgg", ArgumentTypes.Bool, True, "false"), New ScriptArgument("trainerName", ArgumentTypes.Str, True, "Current TrainerName")}), "Adds the Pokémon with the given arguments to the player's party.", ",", False))
ScriptCommand("pokemon", "setadditionalvalue", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("data", ArgumentTypes.Str, False, "")}), "Set the additional data for a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setadditionaldata", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("data", ArgumentTypes.Str, False, "")}), "Set the additional data for a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setnickname", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("nickName", ArgumentTypes.Str, False, "")}), "Set the nick name for a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setstat", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("statName", ArgumentTypes.Str, False, ""), New ScriptArgument("statValue", ArgumentTypes.Int, False, "")}), "Set the value of a stat for a Pokémon in the player's party. Valid arguments for "stat": maxhp,hp,chp,atk,attack,def,defense,spatk,specialattack,spattack,spdef,specialdefense,spdefense,speed", ",", False))
ScriptCommand("pokemon", "clear", "Clears the player's party."))
ScriptCommand("pokemon", "removeattack", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("attackIndex", ArgumentTypes.Int, False, "")}), "Removes the move at the given index from a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "clearattacks", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Clears all moves from a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "addattack", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("attackID", ArgumentTypes.Int, False, "")}), "Adds the move to a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setshiny", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("shiny", ArgumentTypes.Bool, False, "")}), "Sets the shiny value of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "changelevel", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("newLevel", ArgumentTypes.Int, False, "")}), "Sets the level of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "gainexp", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("expAmount", ArgumentTypes.Int, False, "")}), "Adds Experience to the Experience value of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setnature", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("natureID", ArgumentTypes.Int, False, "")}), "Sets the Nature of a Pokémon in the player's party. Valid arguments for "natureID": 0-24", ",", False))
ScriptCommand("pokemon", "npcTrade", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("ownPokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("oppPokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("genderID", ArgumentTypes.Int, False, ""), New ScriptArgument("attackIDs", ArgumentTypes.IntArr, False, ""), New ScriptArgument("shiny", ArgumentTypes.Bool, False, ""), New ScriptArgument("OT", ArgumentTypes.Str, False, ""), New ScriptArgument("TrainerName", ArgumentTypes.Str, False, ""), New ScriptArgument("CatchBallID", ArgumentTypes.Int, False, ""), New ScriptArgument("ItemID", ArgumentTypes.Int, False, ""), New ScriptArgument("location", ArgumentTypes.Str, False, ""), New ScriptArgument("method", ArgumentTypes.Str, False, ""), New ScriptArgument("nickname", ArgumentTypes.Str, False, ""), New ScriptArgument("message1", ArgumentTypes.Str, False, ""), New ScriptArgument("message2", ArgumentTypes.Str, False, ""), New ScriptArgument("register", ArgumentTypes.Str, False, "")}), "Trades a Pokémon with an NPC. Valid arguments for "genderID": 0-2", "|", False))
ScriptCommand("pokemon", "hide", "Hides the following Pokémon."))
ScriptCommand("pokemon", "rename", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Str, False, ""), New ScriptArgument("OTcheck", ArgumentTypes.Bool, False, "")}), "Opens the NameRater rename feature. Valid arguments for "pokemonIndex": 0-5,last", ",", False))
ScriptCommand("pokemon", "read", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Str, False, "")}), "Displays the reader's dialogue.", ",", False))
ScriptCommand("pokemon", "heal", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndicies", ArgumentTypes.IntArr, False, "")}), "Heals the given Pokémon. Valid arguments for "pokemonIndicies": empty or 0-5", ",", False))
ScriptCommand("pokemon", "setfriendship", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Str, False, ""), New ScriptArgument("friendship", ArgumentTypes.Int, False, "")}), "Sets the friendship value for a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "addfriendship", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Str, False, ""), New ScriptArgument("friendship", ArgumentTypes.Int, False, "")}), "Adds to the frienship of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "select", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("canExit", ArgumentTypes.Bool, False, ""), New ScriptArgument("canChooseEgg", ArgumentTypes.Bool, False, ""), New ScriptArgument("canChooseFainted", ArgumentTypes.Bool, False, "")}), "Opens the Pokémon select screen.", ",", False))
ScriptCommand("pokemon", "selectmove", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("canChooseHMMove", ArgumentTypes.Bool, False, ""), New ScriptArgument("canExit", ArgumentTypes.Bool, False, "")}), "Opens the Move Selection screen.", ",", False))
ScriptCommand("pokemon", "calcStats", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Recalculates the stats for the given Pokémon.", ",", False))
ScriptCommand("pokemon", "learnAttack", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("attackID", ArgumentTypes.Int, False, "")}), "Adds the move to the Pokémon's learnset.", ",", False))
ScriptCommand("pokemon", "setgender", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("genderID", ArgumentTypes.Int, False, "")}), "Sets a Pokémon's gender. Valid arguments for "genderID": 0-2", ",", False))
ScriptCommand("pokemon", "setability", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("abilityID", ArgumentTypes.Int, False, "")}), "Sets the ability of a Pokémon in the player's party. Valid arguments for "abilityID": 0-188", ",", False))
ScriptCommand("pokemon", "setev", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("evStat", ArgumentTypes.Str, False, ""), New ScriptArgument("evValue", ArgumentTypes.Int, False, "")}), "Sets the value of the EV stat of a Pokémon in the player's party. Valid arguments for "evstat": hp,atk,attack,def,defense,spatk,specialattack,spattack,spdef,specialdefense,spdefense,speed", ",", False))
ScriptCommand("pokemon", "setiv", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("ivStat", ArgumentTypes.Str, False, ""), New ScriptArgument("ivValue", ArgumentTypes.Int, False, "")}), "Sets the value of the IV stat of a Pokémon in the player's party. Valid arguments for "ivstat": hp,atk,attack,def,defense,spatk,specialattack,spattack,spdef,specialdefense,spdefense,speed", ",", False))
ScriptCommand("pokemon", "registerhalloffame", "Registers the current party as new Hall of Fame entry."))
ScriptCommand("pokemon", "setOT", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("newOT", ArgumentTypes.Str, False, "")}), "Sets the OT of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setItem", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("itemID", ArgumentTypes.Int, False, "")}), "Sets the item of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setItemData", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("itemData", ArgumentTypes.Str, False, "")}), "Sets the data of the item of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setcatchtrainer", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("catchTrainer", ArgumentTypes.Str, False, "")}), "Sets the Catch Trainer of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setcatchball", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("ballID", ArgumentTypes.Int, False, "")}), "Sets the Catch Ball of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setcatchmethod", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("method", ArgumentTypes.Str, False, "")}), "Sets the Catch Method of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setcatchplace", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("location", ArgumentTypes.Str, False, "")}), "Sets the Catch Location of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "setcatchlocation", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("location", ArgumentTypes.Str, False, "")}), "Sets the Catch Location of a Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "newroaming", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("regionID", ArgumentTypes.Int, False, ""), New ScriptArgument("startMap", ArgumentTypes.Str, False, "")}), "Adds a new roaming Pokémon to the list of roaming Pokémon.", "|", False))
ScriptCommand("pokemon", "evolve", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("evolutionTrigger", ArgumentTypes.Str, True, "level"), New ScriptArgument("evolutionArgument", ArgumentTypes.Str, True, "")}), "Tries to evolve a Pokémon with the given conditions. Valid arguments for "evolutionTrigger": level,none,item,trade", ",", False))
ScriptCommand("pokemon", "reload", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Reloads the data for a Pokémon in the player's party to apply changes.", ",", False))
ScriptCommand("pokemon", "clone", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Clones the given Pokémon in the player's party.", ",", False))
ScriptCommand("pokemon", "id", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the ID of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "number", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the ID of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "data", "pokemonData", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the save data for a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "level", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the level of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "hasfullhp", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns if a Pokémon in the player's party has full HP.", ",", True))
ScriptCommand("pokemon", "hp", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the HP of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "atk", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the atk stat of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "def", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the def stat of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "spatk", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the spatk stat of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "spdef", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the spdef stat of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "speed", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the speed stat of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "maxhp", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the max hp of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "isegg", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Pokémon in the players party is an egg.", ",", True))
ScriptCommand("pokemon", "additionaldata", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the additional data for the Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "nickname", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the nick name of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "name", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the name of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "ot", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the OT of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "trainer", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the trainer of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "itemid", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the ID of the item of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "friendship", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the friendship value of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "itemname", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the item name of the item of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "catchball", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the ID of the Pokéball the Pokémon was caught in.", ",", True))
ScriptCommand("pokemon", "catchmethod", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the method the Pokémon was caught.", ",", True))
ScriptCommand("pokemon", "catchlocation", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the location the Pokémon was caught in.", ",", True))
ScriptCommand("pokemon", "hasattack", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("attackID", ArgumentTypes.Int, False, "")}), "Returns if the Pokémon in the player's party knows the specified move.", ",", True))
ScriptCommand("pokemon", "countattacks", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Counts the moves the Pokémon knows.", ",", True))
ScriptCommand("pokemon", "attackname", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("moveIndex", ArgumentTypes.Int, False, "")}), "Returns the name of the move of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "isShiny", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns if the Pokémon is shiny.", ",", True))
ScriptCommand("pokemon", "nature", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the nature of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "ownpokemon", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns if a Pokémon in the player's party was caught by the player.", ",", True))
ScriptCommand("pokemon", "islegendary", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns if a Pokémon in the player's party is a legendary Pokémon.", ",", True))
ScriptCommand("pokemon", "freeplaceinparty", "bool", "Checks if the player has a free place in their party.", ",", True))
ScriptCommand("pokemon", "nopokemon", "bool", "Checks if the player has no Pokémon in their party.", ",", True))
ScriptCommand("pokemon", "count", "int", "Returns the amount of Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "countbattle", "int", "Returns the amount Pokémon that can battle in the player's party.", ",", True))
ScriptCommand("pokemon", "has", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonID", ArgumentTypes.Int, False, "")}), "Returns if the player has the specified Pokémon in their party.", ",", True))
ScriptCommand("pokemon", "selected", "int", "Returns the index of the selector in the player's party. (Set with @pokemon.select)", ",", True))
ScriptCommand("pokemon", "selectedmove", "int", "Returns the index of the move selected. (Set with @pokemon.selectmove)", ",", True))
ScriptCommand("pokemon", "hasegg", "bool", "Returns if the player has an egg in their party.", ",", True))
ScriptCommand("pokemon", "maxpartylevel", "int", "Returns the maximum level a Pokémon has in the player's party.", ",", True))
ScriptCommand("pokemon", "evhp", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the HP EVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "evatk", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Attack EVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "evdef", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Defense EVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "evspatk", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Special Attack EVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "evspdef", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Special Defense EVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "evspeed", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Speed EVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "ivhp", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the HP IVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "ivatk", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Attack IVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "ivdef", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Defense IVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "ivspatk", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Special Attack IVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "ivspdef", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the Special Defense IVs of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "spawnwild", "pokemonData", "Returns the data for a Pokémon that can spawn in the current location.", ",", True))
ScriptCommand("pokemon", "itemdata", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the data of the item of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "countHallofFame", "int", "Counts the Hall of Fame entries.", ",", True))
ScriptCommand("pokemon", "learnedTutorMove", "bool", "Returns if a Pokémon just learned a tutor move (from @screen.teachmoves)", ",", True))
ScriptCommand("pokemon", "totalexp", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the amount of Experience a Pokémon received.", ",", True))
ScriptCommand("pokemon", "needexp", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the amount of Experience a Pokémon needs in order to level up.", ",", True))
ScriptCommand("pokemon", "currentexp", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the amount of Experience the Pokémon colleted for its current level.", ",", True))
ScriptCommand("pokemon", "generateFrontier", "pokemonData", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonClass", ArgumentTypes.Int, False, ""), New ScriptArgument("IDList", ArgumentTypes.IntArr, True, "")}), "Generates a Frontier Pokémon within the set IDList (all Pokémon, if IDList is Nothing).", ",", True))
ScriptCommand("pokemon", "spawnwild", "pokemonData", "Returns the data for a Pokémon that can spawn in the current location.", ",", True))
ScriptCommand("pokemon", "spawn", "pokemonData", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, "")}), "Returns the data for a Pokémon.", ",", True))
ScriptCommand("pokemon", "OTmatch", "bool,int,str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("checkOT", ArgumentTypes.Str, False, ""), New ScriptArgument("returnType", ArgumentTypes.Str, False, "")}), "Returns if the player owns a Pokémon with the given OT. Valid arguments for "returnType": has,id,number,name,maxhits", ",", True))
ScriptCommand("pokemon", "randomOT", "str", "Returns a random OT (5 digit number).", ",", True))
ScriptCommand("pokemon", "status", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the status condition of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "canevolve", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("evolutionTrigger", ArgumentTypes.Str, True, "level"), New ScriptArgument("evolutionArgument", ArgumentTypes.Str, True, "")}), "Returns if the Pokémon can be evolved via the given evolution method. Valid arguments for "evolutionTrigger": level,none,item,trade", ",", True))
ScriptCommand("pokemon", "type1", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the first type of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "type2", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "")}), "Returns the second type of a Pokémon in the player's party.", ",", True))
ScriptCommand("pokemon", "istype", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("type", ArgumentTypes.Str, False, "")}), "Checks if a Pokémon in the player's party has a specific type.", ",", True))
End Sub
Private Shared Sub DoRadio()
ScriptCommand("radio", "allowchannel", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("channel", ArgumentTypes.Sng, False, "")}), "Allows a channel on the map.", ",", False))
ScriptCommand("radio", "blockchannel", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("channel", ArgumentTypes.Sng, False, "")}), "Blocks a channel on the map.", ",", False))
ScriptCommand("radio", "currentchannel", "str", "Returns the name of the channel that is currently playing.", "", True))
End Sub
Private Shared Sub DoRegister()
ScriptCommand("register", "register", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, "")}), "Registers a new register with the given name.", ",", False))
ScriptCommand("register", "register", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("type", ArgumentTypes.Str, False, ""), New ScriptArgument("value", ArgumentTypes.Str, False, "")}), "Registers a new register with the given name, type and value. Valid arguments for "type": str,int,sng,bool", ",", False))
ScriptCommand("register", "unregister", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, "")}), "Unregisters a register with the given name.", ",", False))
ScriptCommand("register", "unregister", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("type", ArgumentTypes.Str, False, "")}), "Unregisters a register with the given name and type that has a value. Valid arguments for "type": str,int,sng,bool", ",", False))
ScriptCommand("register", "registertime", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("time", ArgumentTypes.Int, False, ""), New ScriptArgument("timeFormat", ArgumentTypes.Str, False, "")}), "Registers a time based register. Valid arguments for "timeFormat": days,hours,minutes,seconds,years,weeks,months,dayofweek", ",", False))
ScriptCommand("register", "registered", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, "")}), "Checks if a register with the given name is registered.", ",", True))
ScriptCommand("register", "count", "int", "Counts all registers.", ",", True))
ScriptCommand("register", "type", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, "")}), "Returns the type of a register with the given name.", ",", True))
ScriptCommand("register", "value", "str,int,bool,sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("name", ArgumentTypes.Str, False, "")}), "Returns the value of a register with the given name as its type.", ",", True))
End Sub
Private Shared Sub DoRival()
ScriptCommand("rival", "name", "str", "Returns the rival's name", "", True))
End Sub
Private Shared Sub DoScreen()
ScriptCommand("screen", "storagesystem", "Opens the storage system."))
ScriptCommand("screen", "apricornkurt", "Opens the Apricorn Screen."))
ScriptCommand("screen", "trade", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("tradeItems", ArgumentTypes.ItemCollection, False, ""), New ScriptArgument("canBuy", ArgumentTypes.Bool, False, ""), New ScriptArgument("canSell", ArgumentTypes.Bool, False, "")}), "Opens a new trade screen with the given items in stock. Item collection: {itemID|amount|price}{...}..., amount and price are default for -1", ",", False))
ScriptCommand("screen", "townmap", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("regionList", ArgumentTypes.StrArr, False, "")}), "Opens the map screen with the given regions.", ",", False))
ScriptCommand("screen", "donation", "Opens the donation screen."))
ScriptCommand("screen", "blackout", "Opens the blackout screen and warps the player back to the last saveplace."))
ScriptCommand("screen", "fadein", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("fadeSpeed", ArgumentTypes.Int, True, "5")}), "Fades the screen back in.", ",", False))
ScriptCommand("screen", "fadeout", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("fadeSpeed", ArgumentTypes.Int, True, "5")}), "Fades the screen to black.", ",", False))
ScriptCommand("screen", "credits", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("ending", ArgumentTypes.Str, True, "Johto")}), "Displays a credits scene.", ",", False))
ScriptCommand("screen", "halloffame", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("displayEntryIndex", ArgumentTypes.Int, True, "")}), "Displays the Hall of Fame. If the argument "displayEntryIndex" is not empty, it displays only that entry.", ",", False))
ScriptCommand("screen", "teachmoves", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("moveIDs", ArgumentTypes.IntArr, True, "")}), "Displays a move learn screen. If the argument "moveIDs" is left empty, it defaults to the Pokémon's tutor moves.", ",", False))
ScriptCommand("screen", "mailsystem", "Opens the PC Inbox screen."))
ScriptCommand("screen", "pvp", "Opens the PVP lobby screen (not finished yet, don't use)."))
ScriptCommand("screen", "input", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("defaultName", ArgumentTypes.Str, True, ""), New ScriptArgument("inputMode", ArgumentTypes.Str, True, "0"), New ScriptArgument("currentText", ArgumentTypes.Str, True, ""), New ScriptArgument("maxChars", ArgumentTypes.Int, True, "14")}), "Displays the Input screen. The input can be retrieved with <system.lastinput>. Valid arguments for "inputMode:" 0-2,name,text,numbers", ",", False))
ScriptCommand("screen", "mysteryevent", "Opens the Mystery Event screen."))
End Sub
Private Shared Sub DoScript()
ScriptCommand("script", "start", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("scriptFile", ArgumentTypes.Str, False, "")}), "Starts a script with the given filename (without file extension).", ",", False))
ScriptCommand("script", "text", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("text", ArgumentTypes.Str, False, "")}), "Starts a script with a simple text to display.", ",", False))
ScriptCommand("script", "run", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("scriptContent", ArgumentTypes.Str, False, "")}), "Runs script content. New lines are represented with "^".", ",", False))
End Sub
Private Shared Sub DoSound()
ScriptCommand("sound", "play", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("soundFile", ArgumentTypes.Str, False, ""), New ScriptArgument("stopBackgroundMusic", ArgumentTypes.Bool, True, "false")}), "Plays a sound.", ",", False))
ScriptCommand("sound", "playadvanced", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("soundFile", ArgumentTypes.Str, False, ""), New ScriptArgument("stopBackgroundMusic", ArgumentTypes.Bool, False, ""), New ScriptArgument("pitch", ArgumentTypes.Sng, False, ""), New ScriptArgument("pan", ArgumentTypes.Sng, False, ""), New ScriptArgument("volume", ArgumentTypes.Sng, False, "")}), "Plays a sound with advanced parameters.", ",", False))
End Sub
Private Shared Sub DoStorage()
ScriptCommand("storage", "set", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("type", ArgumentTypes.Str, False, ""), New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("value", ArgumentTypes.Str, False, "")}), "Creates or overwrites a storage with the given name and type. Valid arguments for "type": pokemon,item,string,integer,boolean,single,str,int,bool,sng", ",", False))
ScriptCommand("storage", "clear", "Clears all storage items."))
ScriptCommand("storage", "update", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("type", ArgumentTypes.Str, False, ""), New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("operation", ArgumentTypes.Str, False, ""), New ScriptArgument("value", ArgumentTypes.Str, False, "")}), "Updates the value in a storage with the given name and type. Valid arguments for "type": pokemon,item,string,integer,boolean,single,str,int,bool,sng; Valid arguments for "operation": add,substract,multiply,divide", ",", False))
ScriptCommand("storage", "get", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("type", ArgumentTypes.Str, False, ""), New ScriptArgument("name", ArgumentTypes.Str, False, "")}), "Returns the value for the storage with the type "type" and name "name". Valid arguments for "type": pokemon,item,string,integer,boolean,single,str,int,bool,sng", ",", True))
ScriptCommand("storage", "count", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("type", ArgumentTypes.Str, False, "")}), "Returns the amount of items in the storage for a specific type. Valid arguments for "type": pokemon,item,string,integer,boolean,single,str,int,bool,sng", ",", True))
End Sub
Private Shared Sub DoSystem()
ScriptCommand("system", "random", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("min", ArgumentTypes.Int, True, "1"), New ScriptArgument("max", ArgumentTypes.Int, True, "2")}), "Generates a random number between min and max, inclusive.", ",", True))
ScriptCommand("system", "unixtimestamp", "int", "Returns the UNIX timestamp for the current computer time.", ",", True))
ScriptCommand("system", "dayofyear", "int", "Returns the day of the year (Outdated, use <environment.dayofyear> instead).", ",", True))
ScriptCommand("system", "year", "int", "Returns the current year (Outdated, use <environment.year> instead).", ",", True))
ScriptCommand("system", "booltoint", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("bool", ArgumentTypes.Bool, False, "")}), "Converts a boolean into an integer (Outdated, use <math.int> instead).", ",", True))
ScriptCommand("system", "calcint", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Converts the expression to an integer (Outdated, use <math.int> instead).", ",", True))
ScriptCommand("system", "int", "int", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Converts the expression to an integer (Outdated, use <math.int> instead).", ",", True))
ScriptCommand("system", "calcsng", "sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Converts the expression to a single (Outdated, use <math.sng> instead).", ",", True))
ScriptCommand("system", "sng", "sng", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Converts the expression to a single (Outdated, use <math.sng> instead).", ",", True))
ScriptCommand("system", "sort", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("sortMode", ArgumentTypes.Str, False, ""), New ScriptArgument("returnIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("list", ArgumentTypes.Arr, False, "")}), "Sorts the list after sortmode and returns the item at the given index. Valid arguments for "sortMode": ascending,descending", ",", True))
ScriptCommand("system", "isinsightscript", "bool", "Returns if the running script was triggred by the inSight function of an NPC.", ",", True))
ScriptCommand("system", "lastinput", "str", "Returns the last input received from the input screen (@screen.input).", ",", True))
ScriptCommand("system", "return", "str", "Returns the value set with the ":return" switch.", ",", True))
ScriptCommand("system", "isint", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Checks if the expression is an integer (Outdated, use <math.isint> instead).", ",", True))
ScriptCommand("system", "issng", "bool", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("expression", ArgumentTypes.Str, False, "")}), "Checks if the expression is a single (Outdated, use <math.issng> instead).", ",", True))
ScriptCommand("system", "chrw", "str", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("charCodes", ArgumentTypes.IntArr, False, "")}), "Converts Unicode CharCodes into a string.", ",", True))
End Sub
Private Shared Sub DoText()
ScriptCommand("text", "show", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("text", ArgumentTypes.Str, False, "")}), "Displays a textbox with the given text.", ",", False))
ScriptCommand("text", "setfont", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("font", ArgumentTypes.Str, False, "")}), "Changes the font of the textbox. All fonts from loaded ContentPacks, GameModes and the standard game can be loaded.", ",", False))
ScriptCommand("text", "debug", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("text", ArgumentTypes.Str, False, "")}), "Prints the "text" argument to the immediate window console.", ",", False))
ScriptCommand("text", "log", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("text", ArgumentTypes.Str, False, "")}), "Logs the "text" argument into the log.dat file.", ",", False))
End Sub
Private Shared Sub DoTitle()
ScriptCommand("title", "add", System.Linq.Enumerable.ToList(New ScriptArgument() {New ScriptArgument("text", ArgumentTypes.Str, True, "Sample Text"), New ScriptArgument("delay", ArgumentTypes.Sng, True, "20.0"), New ScriptArgument("R", ArgumentTypes.Int, True, "255"), New ScriptArgument("G", ArgumentTypes.Int, True, "255"), New ScriptArgument("B", ArgumentTypes.Int, True, "255"), New ScriptArgument("scale", ArgumentTypes.Sng, True, "10.0"), New ScriptArgument("isCentered", ArgumentTypes.Bool, True, "true"), New ScriptArgument("x", ArgumentTypes.Sng, True, "0.0"), New ScriptArgument("y", ArgumentTypes.Sng, True, "0.0")}), "Adds a new title for the game to display during gameplay.", ",", False))
ScriptCommand("title", "clear", "Clears all titles that are currently being displayed."))
End Sub