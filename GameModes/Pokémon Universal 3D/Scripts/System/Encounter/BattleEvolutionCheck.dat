version=2
@Storage.set(str,System.Encounter.Pokemon.OldName,<Pokemon.name(<Storage.get(int,System.Encounter.Pokemon.index)>)>)
:if:<Pokemon.canevolve(<Storage.get(int,System.Encounter.Pokemon.index)>)>=true <and> <not><Pokemon.itemname(<Storage.get(int,System.Encounter.Pokemon.index)>)>=Everstone
	@Pokemon.cry(<Pokemon.id(<Storage.get(int,System.Encounter.Pokemon.index)>)>)
	@Text.show(What?)
	@Sound.play(Select)
	@Music.play(evolution)
	@Text.show(<Pokemon.name(<Storage.get(int,System.Encounter.Pokemon.index)>)> is evolving!~Do you want <Pokemon.name(<Storage.get(int,System.Encounter.Pokemon.index)>)> to evolve?)
	@Options.setcancelindex(1)
	@Options.show(YES,NO)
	:when:NO
		@Text.show(Your <Pokemon.name(<Storage.get(int,System.Encounter.Pokemon.index)>)> didn't evolve.)
	:when:Yes
		@Pokemon.evolve(<Storage.get(int,System.Encounter.Pokemon.index)>)
		@Music.stop
		@Sound.play(<Pokemon.id(<Storage.get(int,System.Encounter.Pokemon.index)>)>)
		@Level.wait(1000)
		@Sound.play(success)
		@Text.show(Congratulations!)
		@Sound.play(Select)
		@Text.show(Your <Storage.get(str,System.Encounter.Pokemon.OldName)> evolved into a~<Pokemon.name(<Storage.get(int,System.Encounter.Pokemon.index)>)>!)
	:endwhen
:endif
@Script.start(System\Encounter\BattleLevelCheck)
:end