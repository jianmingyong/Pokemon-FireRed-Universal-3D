version=2
# This is part of the Mystery Dungeon Generator API.

# Init Variable.
@Storage.set(int,MysteryDungeon.RoomSizeX,<System.random(5,<Storage.get(int,MysteryDungeon.MaxRoomSizeX)>)>
@Storage.set(int,MysteryDungeon.RoomSizeZ,<System.random(5,<Storage.get(int,MysteryDungeon.MaxRoomSizeZ)>)>
@Storage.set(int,MysteryDungeon.CurrentDigRoomX,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,0)
@Storage.set(int,MysteryDungeon.RoomPositionX,<System.random(1,<Math.int(<Storage.get(int,MysteryDungeon.MaxSizeX)>-1-<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
@Storage.set(int,MysteryDungeon.RoomPositionZ,<System.random(1,<Math.int(<Storage.get(int,MysteryDungeon.MaxSizeZ)>-1-<Storage.get(int,MysteryDungeon.RoomSizeZ)>)>)>)

# Global Variable.
@Register.register(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>.ID,int,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>)>)
@Register.register(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>.SizeX,int,<Storage.get(int,MysteryDungeon.RoomSizeX)>)
@Register.register(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>.SizeZ,int,<Storage.get(int,MysteryDungeon.RoomSizeZ)>)

# Dig Room Procedure.
:while:<not><Storage.get(int,CurrentDigRoomZ)>=<Storage.get(int,FinalRoomSizeZ)>
	@Storage.set(int,FinalRoomLocationID,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,FinalRoomSizeX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,FinalRoomSizeZ)>)
	@Storage.set(int,CurrentRoomLocationID.1,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>)
	@Storage.set(int,CurrentRoomLocationID.2,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+1000000)
	@Storage.set(int,CurrentRoomLocationID.3,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+2000000)
	@Storage.set(int,CurrentRoomLocationID.4,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+3000000)
	@Storage.set(int,CurrentRoomLocationID.5,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+4000000)
	@Storage.set(int,CurrentRoomLocationID.6,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+5000000)
	@Storage.set(int,CurrentRoomLocationID.7,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+6000000)
	@Storage.set(int,CurrentRoomLocationID.8,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+7000000)
	@Storage.set(int,CurrentRoomLocationID.9,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+8000000)
	@Storage.set(int,CurrentRoomLocationID.10,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+9000000)
	@Storage.set(int,CurrentFinalRoomLocationID,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,FinalRoomSizeX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>)
	:if:<Storage.get(int,CurrentRoomLocationID.1)><<Storage.get(int,CurrentFinalRoomLocationID)>
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.1)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.1)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.2)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>1
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.2)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.2)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.3)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>2
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.3)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.3)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.4)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>3
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.4)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.4)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.5)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>4
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.5)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.5)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.6)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>5
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.6)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.6)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.7)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>6
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.7)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.7)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.8)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>7
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.8)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.8)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.9)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>8
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.9)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.9)>,1)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.10)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>9
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.10)>)
		@Storage.set(int,EntityRemove.<Storage.get(int,CurrentRoomLocationID.10)>,1)
	:endif
	@Level.update
	:if:<Storage.get(int,CurrentDigRoomX)><<Storage.get(int,FinalRoomSizeX)> <and> <not><Storage.get(int,CurrentDigRoomZ)>=<Storage.get(int,FinalRoomSizeZ)>
		@Storage.set(int,CurrentDigRoomX,<Storage.get(int,CurrentDigRoomX)>+<Storage.get(int,MultiProcessor)>)
	:endif
	:if:<Storage.get(int,CurrentDigRoomX)>=<Storage.get(int,FinalRoomSizeX)> <or> <Storage.get(int,CurrentDigRoomX)>><Storage.get(int,FinalRoomSizeX)>
		@Storage.set(int,CurrentDigRoomX,0)
		@Storage.set(int,CurrentDigRoomZ,<Storage.get(int,CurrentDigRoomZ)>+1)
	:endif
:endwhile
@Storage.set(int,NumberOfRoomProcess,<Storage.get(int,NumberOfRoomProcess)>+1)
:end
