version=2
# This is a API for Random Dungeon Generator.
# Digging Room...
@Storage.set(int,CurrentDigRoomX,0)
@Storage.set(int,CurrentDigRoomZ,0)
:while:<not><Storage.get(int,CurrentDigRoomZ)>=<Storage.get(int,FinalRoomSizeZ)>
	@Storage.set(int,FinalRoomLocationID,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,FinalRoomSizeX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,FinalRoomSizeZ)>)
	@Storage.set(int,CurrentRoomLocationID.1,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>)
	@Storage.set(int,CurrentRoomLocationID.2,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+1000000)
	@Storage.set(int,CurrentRoomLocationID.3,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+2000000)
	@Storage.set(int,CurrentRoomLocationID.4,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+3000000)
	@Storage.set(int,CurrentRoomLocationID.5,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+4000000)
	@Storage.set(int,CurrentRoomLocationID.6,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+5000000)
	@Storage.set(int,CurrentRoomLocationID.7,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+6000000)
	@Storage.set(int,CurrentRoomLocationID.8,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+7000000)
	@Storage.set(int,CurrentRoomLocationID.9,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+8000000)
	@Storage.set(int,CurrentRoomLocationID.10,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,CurrentDigRoomX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>+9000000)
	@Storage.set(int,CurrentFinalRoomLocationID,<Math.int(<Storage.get(int,CurrentRoomLocationX)>*1000000)>+<Math.int(<Storage.get(int,FinalRoomSizeX)>*1000000)>+<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,CurrentDigRoomZ)>)
	:if:<Storage.get(int,CurrentRoomLocationID.1)><<Storage.get(int,CurrentFinalRoomLocationID)>
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.1)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.2)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>1
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.2)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.3)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>2
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.3)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.4)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>3
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.4)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.5)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>4
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.5)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.6)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>5
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.6)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.7)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>6
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.7)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.8)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>7
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.8)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.9)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <Storage.get(int,MultiProcessor)>>8
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.9)>)
	:endif
	:if:<Storage.get(int,CurrentRoomLocationID.10)><<Storage.get(int,CurrentFinalRoomLocationID)> <and> <and> <Storage.get(int,MultiProcessor)>>9
		@Entity.remove(<Storage.get(int,CurrentRoomLocationID.10)>)
	:endif
	@Level.update
	:if:<Storage.get(int,CurrentDigRoomX)><<Storage.get(int,FinalRoomSizeX)> <and> <not><Storage.get(int,CurrentDigRoomZ)>=<Storage.get(int,FinalRoomSizeZ)>
		@Storage.set(int,CurrentDigRoomX,<Storage.get(int,CurrentDigRoomX)>+<Storage.get(int,MultiProcessor)>)
	:endif
	:if:<Storage.get(int,CurrentDigRoomX)>=<Storage.get(int,FinalRoomSizeX)> <or> <Storage.get(int,CurrentDigRoomX)>><Storage.get(int,FinalRoomSizeX)>
		@Storage.set(int,CurrentDigRoomX,0)
		@Storage.set(int,CurrentDigRoomZ,<Storage.get(int,CurrentDigRoomZ)>+1)
	:endif
:endwhile
:end