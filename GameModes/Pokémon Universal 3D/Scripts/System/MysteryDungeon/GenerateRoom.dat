version=2
# This is part of the Mystery Dungeon Generator API.

# Init Variable.
@Storage.set(int,MysteryDungeon.CurrentDigRoomX,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.1,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.2,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.3,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.4,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.5,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.6,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.7,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.8,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.9,0)
@Storage.set(int,MysteryDungeon.CurrentDigRoomID.10,0)
@Storage.set(bool,MysteryDungeon.RoomDigCompleted,false)

# Global Variable.
@Register.register(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>.ID,int,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>)
@Register.register(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>.SizeX,int,<Storage.get(int,MysteryDungeon.RoomSizeX)>)
@Register.register(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>.SizeZ,int,<Storage.get(int,MysteryDungeon.RoomSizeZ)>)

# Dig Room Procedure.
:while:<Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
	:if:<Storage.get(int,MysteryDungeon.CurrentDigRoomX)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Storage.get(int,MysteryDungeon.CurrentDigRoomX)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
		@Storage.set(int,MysteryDungeon.CurrentDigRoomID.1,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>)
	:else
		@Storage.set(int,MysteryDungeon.CurrentDigRoomID.1,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>1
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+1)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+1)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.2,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+1000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.2,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+1)>-<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+1)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+1)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
		:endif
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>2
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+2)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+2)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.3,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+2000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.3,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+2)>-<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+2)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+2)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
		:endif
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>3
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+3)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+3)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.4,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+3000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.4,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+3)>-<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+3)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+3)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
		:endif
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>4
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+4)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+4)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.5,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+4000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.5,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+4)>-<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+4)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+4)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
		:endif
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>5
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+5)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+5)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.6,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+5000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.6,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+5000000)
		:endif
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>6
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+6)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+6)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.7,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+6000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.7,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+6)>-<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+6)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+6)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
		:endif
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>7
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+7)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+7)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.8,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+7000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.8,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+7)>-<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+7)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+7)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
		:endif
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>8
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+8)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+8)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.9,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+8000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.9,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+8)>-<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+8)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+8)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
		:endif
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>9
		:if:<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+9)><<Storage.get(int,MysteryDungeon.RoomSizeX)> <or> <Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+9)>=<Storage.get(int,MysteryDungeon.RoomSizeX)>
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.10,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+9000000)
		:else
			@Storage.set(int,MysteryDungeon.CurrentDigRoomID.10,<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>*1000000)>+<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.CurrentDigRoomZ)>+<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+9)>-<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+9)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>*<Storage.get(int,MysteryDungeon.RoomSizeX)>)>-1)>*1000000)>+<Math.int(<Math.floor(<Math.int(<Storage.get(int,MysteryDungeon.CurrentDigRoomX)>+9)>/<Storage.get(int,MysteryDungeon.RoomSizeX)>)>)>)
		:endif
	:endif
	
	# Digging Algorithm.
	:if:<not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.1)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.1)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.1)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.1)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.1)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.1)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>1 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.2)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.2)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.2)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.2)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.2)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.2)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>2 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.3)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.3)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.3)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.3)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.3)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.3)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>3 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.4)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.4)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.4)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.4)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.4)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.4)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>4 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.5)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.5)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.5)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.5)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.5)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.5)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>5 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.6)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.6)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.6)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.6)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.6)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.6)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>6 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.7)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.7)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.7)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.7)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.7)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.7)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>7 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.8)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.8)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.8)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.8)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.8)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.8)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>8 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.9)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.9)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.9)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.9)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.9)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.9)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	:if:<Storage.get(int,MysteryDungeon.Processor)>>9 <and> <not><Storage.get(int,MysteryDungeon.CurrentDigRoomID.10)>=<Math.int(<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionX)>+<Storage.get(int,MysteryDungeon.RoomSizeX)>-1)>*1000000)>+<Math.int(<Storage.get(int,MysteryDungeon.RoomPositionZ)>+<Storage.get(int,MysteryDungeon.RoomSizeZ)>-1)>)> <and> <Storage.get(bool,MysteryDungeon.RoomDigCompleted)>=false
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.10)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomX,<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.10)>/1000000)>)
		@Storage.set(int,MysteryDungeon.CurrentDigRoomZ,<Storage.get(int,MysteryDungeon.CurrentDigRoomID.10)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.10)>/1000000)>*1000000)>)
	:else
		@Entity.remove(<Storage.get(int,MysteryDungeon.CurrentDigRoomID.10)>)
		@Storage.set(bool,MysteryDungeon.RoomDigCompleted,true)
		:exitwhile
	:endif
	@Level.update
:endwhile
@Storage.set(int,MysteryDungeon.NumberOfRoomGenerated,<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>+1)
:end