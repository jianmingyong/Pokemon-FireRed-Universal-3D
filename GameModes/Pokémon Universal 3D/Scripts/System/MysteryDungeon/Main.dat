version=2
# This is a API for Random Dungeon Generator.
# You will require a compatible map to run this.

##############################
# Main Settings
##############################

# Define Map Size.
@Storage.set(int,MysteryDungeon.MapSizeX,50)
@Storage.set(int,MysteryDungeon.MapSizeZ,50)

# Define Room Size.
# By default, Min Room Size is 5 by 5.
@Storage.set(int,MysteryDungeon.MaxRoomSizeX,10)
@Storage.set(int,MysteryDungeon.MaxRoomSizeZ,10)

# Define Number of Tiles to be Removed at the same time.
# The bigger the value, the faster it process. 
# Max value is 10.
@Storage.set(int,MysteryDungeon.MaxProcessor,10)

##############################
# Do not touch anything below here
##############################

:if:<Register.registered(MysteryDungeon.SaveMap)>=false
	@Register.register(MysteryDungeon.SaveMap)
:endif
@Title.add(Generating... Please wait for a while.,2147483647,255,255,255,2,true,0,0)

# Init Variable.
@Storage.set(int,MysteryDungeon.NumberOfRoomGenerated,0)
@Storage.set(int,MysteryDungeon.NumberOfWallGenerated,0)
@Storage.set(int,MysteryDungeon.Processor,<Math.clamp(<Storage.get(int,Processor)>,1,10)>)
@Storage.set(int,MysteryDungeon.MaxRoomSizeX,<Math.clamp(<Storage.get(int,MaxRoomSizeX)>,5,<Storage.get(int,MapSizeX)>-1)
@Storage.set(int,MysteryDungeon.MaxRoomSizeZ,<Math.clamp(<Storage.get(int,MaxRoomSizeZ)>,5,<Storage.get(int,MapSizeZ)>-1)
@Storage.set(bool,MysteryDungeon.MasterValid,true)

:while:<Storage.get(bool,MasterValid)>=true
	# Dig a Random Object.
	@Storage.set(
	:if:<Storage.get(int,NumberOfRoomGenerated)>=0
		
	
:endwhile

# Dig a Random Location.
@Storage.set(int,FinalRoomSizeX,<System.random(<Storage.get(int,MinRoomSizeX)>,<Storage.get(int,MaxRoomSizeX)>)>)
@Storage.set(int,FinalRoomSizeZ,<System.random(<Storage.get(int,MinRoomSizeZ)>,<Storage.get(int,MaxRoomSizeZ)>)>)
@Storage.set(int,CurrentRoomLocationX,<System.random(1,<Storage.get(int,MapSizeX)>-1-<Storage.get(int,MaxRoomSizeX)>)>)
@Storage.set(int,CurrentRoomLocationZ,<System.random(1,<Storage.get(int,MapSizeZ)>-1-<Storage.get(int,MaxRoomSizeZ)>)>)
@Script.start(System\MysteryDungeon\GenerateRoom)
@Script.start(System\MysteryDungeon\RegisterRoomLocation)

# Check For Valid Walls to Dig.
@Storage.set(int,ValidWallN.X,<Storage.get(int,CurrentRoomLocationX)>)
@Storage.set(int,ValidWallN.Z,<Storage.get(int,CurrentRoomLocationZ)>-1)
@Storage.set(int,ValidWallS.X,<Storage.get(int,CurrentRoomLocationX)>)
@Storage.set(int,ValidWallS.Z,<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,FinalRoomSizeZ)>)
@Storage.set(int,ValidWallE.X,<Storage.get(int,CurrentRoomLocationX)>+<Storage.get(int,FinalRoomSizeX)>)
@Storage.set(int,ValidWallE.Z,<Storage.get(int,CurrentRoomLocationZ)>)
@Storage.set(int,ValidWallW.X,<Storage.get(int,CurrentRoomLocationX)>-1)
@Storage.set(int,ValidWallW.Z,<Storage.get(int,CurrentRoomLocationZ)>)
@Storage.set(int,CurrentWallN.X,<System.random(<Storage.get(int,ValidWallN.X)>,<Storage.get(int,ValidWallN.X)>+<Storage.get(int,FinalRoomSizeX)>-1)>)
@Storage.set(int,CurrentWallN.Z,<Storage.get(int,ValidWallN.Z)>)
@Storage.set(int,CurrentWallS.X,<System.random(<Storage.get(int,ValidWallS.X)>,<Storage.get(int,ValidWallS.X)>+<Storage.get(int,FinalRoomSizeX)>-1)>)
@Storage.set(int,CurrentWallS.Z,<Storage.get(int,ValidWallS.Z)>)
@Storage.set(int,CurrentWallE.X,<Storage.get(int,ValidWallE.X)>)
@Storage.set(int,CurrentWallE.Z,<System.random(<Storage.get(int,ValidWallE.Z)>,<Storage.get(int,ValidWallE.Z)>+<Storage.get(int,FinalRoomSizeZ)>-1)>)
@Storage.set(int,CurrentWallW.X,<Storage.get(int,ValidWallW.X)>)
@Storage.set(int,CurrentWallW.Z,<System.random(<Storage.get(int,ValidWallW.Z)>,<Storage.get(int,ValidWallW.Z)>+<Storage.get(int,FinalRoomSizeZ)>-1)>)
@Storage.set(int,WallDig,<System.random(5,10)>)
:if:<not><Math.int(<Storage.get(int,ValidWallN.Z)>-<Storage.get(int,WallDig)>)>=0 <and> <not><Math.int(<Storage.get(int,ValidWallN.Z)>-<Storage.get(int,WallDig)>)><0
	@Storage.set(int,ValidWallN,1)
:else
	@Storage.set(int,ValidWallN,0)
:endif
:if:<not><Math.int(<Storage.get(int,ValidWallS.Z)>+<Storage.get(int,WallDig)>)>=<Math.int(<Storage.get(int,MapSizeZ)>-1)> <and> <not><Math.int(<Storage.get(int,ValidWallS.Z)>+<Storage.get(int,WallDig)>)>><Math.int(<Storage.get(int,MapSizeZ)>-1)>
	@Storage.set(int,ValidWallS,1)
:else
	@Storage.set(int,ValidWallS,0)
:endif
:if:<not><Math.int(<Storage.get(int,ValidWallE.X)>+<Storage.get(int,WallDig)>)>=<Math.int(<Storage.get(int,MapSizeX)>-1)> <and> <not><Math.int(<Storage.get(int,ValidWallE.X)>+<Storage.get(int,WallDig)>)>><Math.int(<Storage.get(int,MapSizeX)>-1)>
	@Storage.set(int,ValidWallE,1)
:else
	@Storage.set(int,ValidWallE,0)
:endif
:if:<not><Math.int(<Storage.get(int,ValidWallW.X)>-<Storage.get(int,WallDig)>)>=0 <and> <not><Math.int(<Storage.get(int,ValidWallW.X)>-<Storage.get(int,WallDig)>)><0
	@Storage.set(int,ValidWallW,1)
:else
	@Storage.set(int,ValidWallW,0)
:endif
@Script.start(System\MysteryDungeon\GenerateWall)

# Dig Remaining Map.
@Storage.set(int,FinalRoomSizeX,<System.random(<Storage.get(int,MinRoomSizeX)>,<Storage.get(int,MaxRoomSizeX)>)>)
@Storage.set(int,FinalRoomSizeZ,<System.random(<Storage.get(int,MinRoomSizeZ)>,<Storage.get(int,MaxRoomSizeZ)>)>)
:if:<Storage.get(int,WallDigDir)>=1
	@Storage.set(int,CurrentRoomLocationX,<System.random(<Math.int(<Storage.get(int,CurrentWallN.X)>-<Storage.get(int,FinalRoomSizeX)>)>+1,<Storage.get(int,CurrentWallN.X)>)>)
	@Storage.set(int,CurrentRoomLocationZ,<Math.int(<Storage.get(int,CurrentWallN.Z)>-<Storage.get(int,WallDig)>-<Storage.get(int,FinalRoomSizeZ)>)>+1)
	@Text.show(<Storage.get(int,CurrentRoomLocationX)> <Storage.get(int,CurrentRoomLocationZ)>)
	@Storage.set(int,ValidRoom,0)
	@Script.start(System\MysteryDungeon\ValidatorRoom)
	@Script.start(System\MysteryDungeon\GenerateRoom)
	@Script.start(System\MysteryDungeon\RegisterRoomLocation)
:endif
#. :while:<Storage.get(int,ValidRoom)>=1 <or> <Storage.get(int,ValidWallN)>=1 <or> <Storage.get(int,ValidWallS)>=1 <or> <Storage.get(int,ValidWallE)>=1 <or> <Storage.get(int,ValidWallW)>=1
#.	:exitwhile
#. :endwhile

# Warp Player to a walkable zone.
@Player.warp(<System.random(<Storage.get(int,CurrentRoomLocationX)>,<Storage.get(int,CurrentRoomLocationX)>+<Storage.get(int,FinalRoomSizeX)>-1)>,0.1,<System.random(<Storage.get(int,CurrentRoomLocationZ)>,<Storage.get(int,CurrentRoomLocationZ)>+<Storage.get(int,FinalRoomSizeZ)>-1)>)
@Level.update
@Title.clear
:end
