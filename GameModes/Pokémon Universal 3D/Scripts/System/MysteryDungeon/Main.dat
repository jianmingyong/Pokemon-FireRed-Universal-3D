##############################
# Mystery Dungeon Generator
# by: jianmingyong
# Basic requirement: A custom map
##############################

# If using Pok√©mon Universal 3D API
:if:<Storage.exists(System.StackTrace)>=true
	@Storage.set(str,System.StackTrace,System\MysteryDungeon\Main.dat)
	@Script.start(System\GlobalStackTrace)
:endif

##############################
# Main Settings
##############################

# Define Map Size.
@Storage.set(int,MysteryDungeon.MapSizeX,50)
@Storage.set(int,MysteryDungeon.MapSizeZ,50)

# Define Level.
# Pit Stop, Easy, Medium, Hard.
# Easy (4) Medium (5-6) Hard (7-8)
@Storage.set(str,MysteryDungeon.Level,Easy)

# Define Directory.
# Directory is relative to script folder. If the script are in a sub folder of scripts folder, define it below.
# Else Nothing will define the default location.
@Storage.set(str,MysteryDungeon.Directory,System\MysteryDungeon\)

##############################
# Do not touch anything below here
##############################

# Save Flag. This allow resume current map.
:if:<Register.exists(MysteryDungeon.SaveMap)>=false
	@Register.new(MysteryDungeon.SaveMap)
:endif
@Title.add(Generating... Please wait for a while.,2147483647,255,255,255,2,true,0,0)

# Initialization Global Variable.
@Storage.set(int,MysteryDungeon.NumberOfRoomGenerated,0)
:switch:<Storage.get(str,MysteryDungeon.Level)>
	:when:Pit Stop
		@Storage.set(int,MysteryDungeon.MaxNumberOfRoomGenerated,1)
	:when:Easy
		@Storage.set(int,MysteryDungeon.MaxNumberOfRoomGenerated,4)
	:when:Medium
		@Storage.set(int,MysteryDungeon.MaxNumberOfRoomGenerated,<System.random(5,6)>)
	:when:Hard
		@Storage.set(int,MysteryDungeon.MaxNumberOfRoomGenerated,<System.random(7,8)>)
:endswitch
@Storage.set(int,MysteryDungeon.NumberOfWallGenerated,0)
@Storage.set(int,MysteryDungeon.MaxRoomSizeX,<Math.int(<Math.floor((<Storage.get(int,MysteryDungeon.MapSizeX)>/<Storage.get(int,MysteryDungeon.MaxNumberOfRoomGenerated)>)*0.75)>)>)
@Storage.set(int,MysteryDungeon.MaxRoomSizeZ,<Math.int(<Math.floor((<Storage.get(int,MysteryDungeon.MapSizeZ)>/<Storage.get(int,MysteryDungeon.MaxNumberOfRoomGenerated)>)*0.75)>)>)
@Storage.set(int,MysteryDungeon.NumberofRoomEntityStore,0)

# Generate Random Rooms.
:while:!<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>=<Storage.get(int,MysteryDungeon.MaxNumberOfRoomGenerated)>
	# Dig a Random Object.
	@Script.start(System\MysteryDungeon\ValidRoom)
	@Script.start(System\MysteryDungeon\GenerateRoom)
:endwhile

# Warp Player to a walkable zone.
@Storage.set(int,MysteryDungeon.RandomRoomID,<System.random(0,<Storage.get(int,MysteryDungeon.NumberOfRoomGenerated)>-1)>)
@Storage.set(int,MysteryDungeon.WarpID,<Register.value(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.RandomRoomID)>.ID)>)
@Storage.set(int,MysteryDungeon.WarpSizeX,<Register.value(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.RandomRoomID)>.SizeX)>)
@Storage.set(int,MysteryDungeon.WarpSizeZ,<Register.value(MysteryDungeon.Room<Storage.get(int,MysteryDungeon.RandomRoomID)>.SizeZ)>)
@Storage.set(int,MysteryDungeon.WarpX,<System.random(<Math.floor(<Storage.get(int,MysteryDungeon.WarpID)>/1000)>,<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.WarpID)>/1000)>+<Storage.get(int,MysteryDungeon.WarpSizeX)>-1)>)>)
@Storage.set(int,MysteryDungeon.WarpZ,<System.random(<Storage.get(int,MysteryDungeon.WarpID)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.WarpID)>/1000)>*1000)>,<Math.int(<Math.int(<Storage.get(int,MysteryDungeon.WarpID)>-<Math.int(<Math.floor(<Storage.get(int,MysteryDungeon.WarpID)>/1000)>*1000)>)>+<Storage.get(int,MysteryDungeon.WarpSizeZ)>-1)>)>)
@Player.warp(<Storage.get(int,MysteryDungeon.WarpX)>,0.1,<Storage.get(int,MysteryDungeon.WarpZ)>)
@Level.update
@Title.clear
