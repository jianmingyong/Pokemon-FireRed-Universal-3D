version=2
# This is a API for Random Dungeon Generator.
@Storage.set(int,CurrentEntityProcess.X,<Storage.get(int,CurrentRoomLocationX)>)
@Storage.set(int,CurrentEntityProcess.Z,<Storage.get(int,CurrentRoomLocationZ)>)
:while:<not><Storage.get(int,CurrentEntityProcess.X)>><Storage.get(int,FinalRoomSizeX)> <and> <not><Storage.get(int,CurrentEntityProcess.Z)>><Storage.get(int,FinalRoomSizeZ)>
	:if:<not><Storage.get(int,CurrentEntityProcess.X)>><Storage.get(int,FinalRoomSizeX)>
		@Storage.set(int,CheckEntityRemove,<Math.int(<Storage.get(int,CurrentEntityProcess.X)>*1000000)>+<Storage.get(int,CurrentEntityProcess.Z)>)
		:if:<Storage.get(int,EntityRemove.<Storage.get(int,CheckEntityRemove)>)>=0
			@Storage.set(int,ValidRoom,1)
		:else
			@Storage.set(int,ValidRoom,0)
		:endif
		@Storage.set(int,CurrentEntityProcess.X,<Storage.get(int,CurrentEntityProcess.X)>+1)
	:endif
	:if:<Storage.get(int,CurrentEntityProcess.X)>><Storage.get(int,FinalRoomSizeX)> <and> <not><Storage.get(int,CurrentEntityProcess.Z)>><Storage.get(int,FinalRoomSizeZ)>
		@Storage.set(int,CurrentEntityProcess.X,<Storage.get(int,CurrentRoomLocationX)>)
		@Storage.set(int,CurrentEntityProcess.Z,<Storage.get(int,CurrentEntityProcess.Z)>+1)
	:endif
:endwhile
:end