Private Shared Sub DoBattle()
ScriptLibrary.r(New ScriptCommand("battle", "starttrainer", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "") }), "Initializes a trainer interaction and checks if the player has already beaten that trainer.", ",", False))
ScriptLibrary.r(New ScriptCommand("battle", "trainer", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "") }), "Initializes a trainer battle.", ",", False))
ScriptLibrary.r(New ScriptCommand("battle", "wild", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonData", ArgumentTypes.PokemonData, False, ""), New ScriptArgument("musicloop", ArgumentTypes.Str, True, "") }), "Initializes the battle with a wild Pokémon.", ",", False))
ScriptLibrary.r(New ScriptCommand("battle", "wild", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("shiny", ArgumentTypes.Int, True, "-1"), New ScriptArgument("musicloop", ArgumentTypes.Str, True, ""), New ScriptArgument("introtype", ArgumentTypes.Int, True, "0-10") }), "Initializes the battle with a wild Pokémon.", ",", False))
ScriptLibrary.r(New ScriptCommand("battle", "setvar", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("varName", ArgumentTypes.Str, New String() { "canrun", "cancatch", "canblackout", "canreceiveexp", "canuseitems", "frontiertrainer", "divebattle", "inversebattle" }, False, ""), New ScriptArgument("varValue", ArgumentTypes.Str, False, "") }), "Sets a battle value.", ",", False))
ScriptLibrary.r(New ScriptCommand("battle", "defeatmessage", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "") }), "Returns the defeat message of the trainer loaded from the given ""trainerFile"".", ",", True))
ScriptLibrary.r(New ScriptCommand("battle", "intromessage", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "") }), "Returns the intro message of the trainer loaded from the given ""trainerFile"".", ",", True))
ScriptLibrary.r(New ScriptCommand("battle", "outromessage", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("trainerFile", ArgumentTypes.Str, False, "") }), "Returns the outro message of the trainer loaded from the given ""trainerFile"".", ",", True))
ScriptLibrary.r(New ScriptCommand("battle", "won", "bool", "Returns ""true"" if the player won the last battle. Returns ""false"" otherwise.", ",", True))
End Sub

Private Shared Sub DoCamera()
ScriptLibrary.r(New ScriptCommand("camera", "set", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, ""), New ScriptArgument("yaw", ArgumentTypes.Sng, False, ""), New ScriptArgument("pitch", ArgumentTypes.Sng, False, "") }), "Sets the given properties of the camera.", ",", False))
ScriptLibrary.r(New ScriptCommand("camera", "reset", "Resets the camera to the default setting."))
ScriptLibrary.r(New ScriptCommand("camera", "setyaw", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("yaw", ArgumentTypes.Sng, False, "") }), "Sets the Yaw property of the camera.", ",", False))
ScriptLibrary.r(New ScriptCommand("camera", "setpitch", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pitch", ArgumentTypes.Sng, False, "") }), "Sets the Pitch property of the camera.", ",", False))
ScriptLibrary.r(New ScriptCommand("camera", "setposition", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Sets the Position property of the camera.", ",", False))
ScriptLibrary.r(New ScriptCommand("camera", "setx", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("x", ArgumentTypes.Sng, False, "") }), "Sets the X Position property of the camera.", ",", False))
ScriptLibrary.r(New ScriptCommand("camera", "sety", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("y", ArgumentTypes.Sng, False, "") }), "Sets the Y Position property of the camera.", ",", False))
ScriptLibrary.r(New ScriptCommand("camera", "setz", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Sets the Z Position property of the camera.", ",", False))
ScriptLibrary.r(New ScriptCommand("camera", "togglethirdperson", "Toggles the third person camera."))
ScriptLibrary.r(New ScriptCommand("camera", "activatethirdperson", "Activates the third person camera."))
ScriptLibrary.r(New ScriptCommand("camera", "deactivatethirdperson", "Deactivates the third person camera."))
ScriptLibrary.r(New ScriptCommand("camera", "fix", "Fixes the camera to the current position."))
ScriptLibrary.r(New ScriptCommand("camera", "defix", "Defixes the camera so that it clips behind the player again."))
ScriptLibrary.r(New ScriptCommand("camera", "togglefix", "Sets the fix state of the camera to the opposite of the current state."))
ScriptLibrary.r(New ScriptCommand("camera", "isfixed", "bool", "Returns if the camera is fixed to a specific position.", ",", True))
ScriptLibrary.r(New ScriptCommand("camera", "x", "sng", "Returns the current x position of the camera.", ",", True))
ScriptLibrary.r(New ScriptCommand("camera", "y", "sng", "Returns the current y position of the camera.", ",", True))
ScriptLibrary.r(New ScriptCommand("camera", "z", "sng", "Returns the current z position of the camera.", ",", True))
End Sub

Private Shared Sub DoChat()
ScriptLibrary.r(New ScriptCommand("chat", "clear", "Clears the chat."))
End Sub

Private Shared Sub DoDaycare()
ScriptLibrary.r(New ScriptCommand("daycare", "takeegg", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, "") }), "Removes the egg from the daycare and adds it to the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("daycare", "takepokemon", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Takes a Pokémon from the daycare to the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("daycare", "leavepokemon", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("PokemonDaycareIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Removes a Pokémon from the player's party and fills the given PokemonDaycareIndex with that Pokémon.", ",", False))
ScriptLibrary.r(New ScriptCommand("daycare", "removeegg", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, "") }), "Removes the egg from the daycare.", ",", False))
ScriptLibrary.r(New ScriptCommand("daycare", "clean", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, "") }), "Cleans all data for the given daycare. This doesn't remove the data, just rearranges it.", ",", False))
ScriptLibrary.r(New ScriptCommand("daycare", "call", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, "") }), "Initializes a call with the daycare. This checks if the daycare is registered in the Pokégear.", ",", False))
ScriptLibrary.r(New ScriptCommand("daycare", "cleardata", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, "") }), "Clears all the data for one daycare. That includes the Pokémon stored there and a potetial egg.", ",", False))
ScriptLibrary.r(New ScriptCommand("daycare", "pokemonID", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Pokémon ID of a Pokémon in the daycare.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "pokemonName", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the name of a Pokémon in the daycare.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "pokemonSprite", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the sprite of a Pokémon in the daycare.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "shinyIndicator", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Shiny Indicator of a Pokémon in the daycare (either ""N"" or ""S"").", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "countpokemon", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, "") }), "Returns the amount of Pokémon in the daycare.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "haspokemon", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Pokémon ID of a Pokémon in the daycare.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "canswim", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns if the Pokémon in the daycare can swim.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "hasegg", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, "") }), "Returns if the daycare has an egg.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "grownlevels", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the amount of levels the Pokémon has grown in the daycare.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "currentlevel", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the current level of the Pokémon in the daycare.", ",", True))
ScriptLibrary.r(New ScriptCommand("daycare", "canbreed", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("daycareID", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the chance the Pokémon in the daycare can breed (in %).", ",", True))
End Sub

Private Shared Sub DoEntity()
ScriptLibrary.r(New ScriptCommand("entity", "showmessagebulb", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("bulbID", ArgumentTypes.Int, New String() { "0-11" }, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Displays a message bulb in the world.", "|", False))
ScriptLibrary.r(New ScriptCommand("entity", "warp", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Warps the entity to a new location on the map.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "scale", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("xS", ArgumentTypes.Sng, False, ""), New ScriptArgument("yS", ArgumentTypes.Sng, False, ""), New ScriptArgument("zS", ArgumentTypes.Sng, False, "") }), "Changes the Scale property of the selected entity.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "remove", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Removes the entity from the map once it updates.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "setid", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("newID", ArgumentTypes.Int, False, "") }), "Sets the entity ID of the selected entity to a new ID.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "setopacity", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("opacity", ArgumentTypes.Int, False, "") }), "Sets the Opacity property of the selected entity. ""opacity"" in %.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "setvisible", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("visible", ArgumentTypes.Bool, False, "") }), "Sets the Visible property of the selected entity.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "setadditionalvalue", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("additionalValue", ArgumentTypes.Str, False, "") }), "Sets the AdditionalValue property of the selected entity.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "setcollision", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("collision", ArgumentTypes.Bool, False, "") }), "Sets the Collision property of the selected entity.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "settetxure", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("textureIndex", ArgumentTypes.Str, False, ""), New ScriptArgument("textureName", ArgumentTypes.Str, False, ""), New ScriptArgument("rX", ArgumentTypes.Int, False, ""), New ScriptArgument("rY", ArgumentTypes.Int, False, ""), New ScriptArgument("rWidth", ArgumentTypes.Int, False, ""), New ScriptArgument("rHeight", ArgumentTypes.Int, False, "") }), "Sets the texture in the selected entity's texture array. Argument example: 0,0,[nilllzz,0,10,32,32]", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "addtoposition", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Adds the given coordinates to the position of the given entity.", ",", False))
ScriptLibrary.r(New ScriptCommand("entity", "visible", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns if the selected entity is visible.", ",", True))
ScriptLibrary.r(New ScriptCommand("entity", "opacity", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns the opacity property of the selected entity.", ",", True))
ScriptLibrary.r(New ScriptCommand("entity", "position", "sngArr", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns the position of the selected entity in the pattern ""x,y,z"".", ",", True))
ScriptLibrary.r(New ScriptCommand("entity", "positionx", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns the X position of the selected entity.", ",", True))
ScriptLibrary.r(New ScriptCommand("entity", "positiony", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns the Y position of the selected entity.", ",", True))
ScriptLibrary.r(New ScriptCommand("entity", "positionz", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns the Z position of the selected entity.", ",", True))
ScriptLibrary.r(New ScriptCommand("entity", "scale", "sngArr", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns the scale of the selected entity in the pattern ""x,y,z"".", ",", True))
ScriptLibrary.r(New ScriptCommand("entity", "additionalvalue", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns the additional value of the selected entity.", ",", True))
ScriptLibrary.r(New ScriptCommand("entity", "collision", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("entityID", ArgumentTypes.Int, False, "") }), "Returns the collision property of the selected entity.", ",", True))
End Sub

Private Shared Sub DoEnvironment()
ScriptLibrary.r(New ScriptCommand("environment", "setweather", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("weatherID", ArgumentTypes.Int, False, "") }), "Changes the weather of the current map.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setregionweather", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("weatherID", ArgumentTypes.Int, False, "") }), "Changes the weather of the current region.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setcanfly", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("canfly", ArgumentTypes.Bool, False, "") }), "Sets the ""CanFly"" parameter of the current map.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setcandig", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("candig", ArgumentTypes.Bool, False, "") }), "Sets the ""CanDig"" parameter of the current map.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setcanteleport", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("canteleport", ArgumentTypes.Bool, False, "") }), "Sets the ""CanTeleport"" parameter of the current map.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setwildpokemongrass", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("canencounter", ArgumentTypes.Bool, False, "") }), "Sets the ""WildPokemonGrass"" parameter of the current map.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setwildpokemonwater", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("canencounter", ArgumentTypes.Bool, False, "") }), "Sets the ""WildPokemonWater"" parameter of the current map.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setwildpokemoneverywhere", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("canencounter", ArgumentTypes.Bool, False, "") }), "Sets the ""WildPokemonEverywhere"" parameter of the current map.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setisdark", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("isDark", ArgumentTypes.Bool, False, "") }), "Sets the ""IsDark"" parameter of the current map.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "setrenderdistance", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("distance", ArgumentTypes.Str, New String() { "0-4", "tiny", "small", "normal", "far", "extreme" }, False, "") }), "Sets the render distance.", ",", False))
ScriptLibrary.r(New ScriptCommand("environment", "toggledarkness", "Toggles the ""IsDark"" parameter of the current map."))
ScriptLibrary.r(New ScriptCommand("environment", "daytime", "str", "Returns the current DayTime of the game.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "daytimeID", "int", "Returns the current DayTimeID of the game.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "season", "str", "Returns the current Season of the game.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "seasonID", "int", "Returns the current SeasonID of the game.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "day", "str", "Returns the current day of the week.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "dayofyear", "int", "Returns the current day of the year.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "dayinformation", "str", "Returns the current day of the week and DayTime of the game.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "week", "str", "Returns the current week of the year.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "year", "str", "Returns the current year.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "weather", "str", "Returns the Weather of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "mapweather", "str", "Returns the Weather of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "currentmapweather", "str", "Returns the Weather of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "weatherid", "int", "Returns the WeatherID of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "mapweatherid", "int", "Returns the WeatherID of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "currentmapweatherid", "int", "Returns the WeatherID of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "regionweather", "str", "Returns the Weather of the current region.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "regionweatherid", "str", "Returns the WeatherID of the current region.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "canfly", "bool", "Returns the ""CanFly"" parameter of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "candig", "bool", "Returns the ""CanDig"" parameter of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "canteleport", "bool", "Returns the ""CanTeleport"" parameter of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "wildpokemongrass", "bool", "Returns the ""WildPokemonGrass"" parameter of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "wildpokemonwater", "bool", "Returns the ""WildPokemonWater"" parameter of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "wildpokemoneverywhere", "bool", "Returns the ""WildPokemonEverywhere"" parameter of the current map.", ",", True))
ScriptLibrary.r(New ScriptCommand("environment", "isdark", "bool", "Returns the ""IsDark"" parameter of the current map.", ",", True))
End Sub

Private Shared Sub DoFileSystem()
ScriptLibrary.r(New ScriptCommand("filesystem", "pathsplit", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("index", ArgumentTypes.Int, False, ""), New ScriptArgument("path", ArgumentTypes.Str, False, "") }), "Returns the part of the path that is at the position of index.", ",", True))
ScriptLibrary.r(New ScriptCommand("filesystem", "pathsplitcount", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("path", ArgumentTypes.Str, False, "") }), "Returns the amount of parts in the given path.", ",", True))
ScriptLibrary.r(New ScriptCommand("filesystem", "pathup", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("path", ArgumentTypes.Str, False, "") }), "Returns the parent path to the given path if possible.", ",", True))
End Sub

Private Shared Sub DoInventory()
ScriptLibrary.r(New ScriptCommand("inventory", "countitem", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("itemID", ArgumentTypes.Int, False, "") }), "Returns the amount of the Item with the given ID in the player's inventory.", ",", True))
ScriptLibrary.r(New ScriptCommand("inventory", "countitems", "int", "Counts all items in the player's inventory.", ",", True))
ScriptLibrary.r(New ScriptCommand("inventory", "name", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("itemID", ArgumentTypes.Int, False, "") }), "Returns the name of an Item by its ItemID.", ",", True))
ScriptLibrary.r(New ScriptCommand("inventory", "ID", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("itemName", ArgumentTypes.Str, False, "") }), "Returns the ID of an Item by its Name.", ",", True))
End Sub

Private Shared Sub DoItem()
ScriptLibrary.r(New ScriptCommand("item", "give", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("ItemID", ArgumentTypes.Int, False, ""), New ScriptArgument("Amount", ArgumentTypes.Int, True, "1") }), "Adds the given amount of items to the player's inventory.", ",", False))
ScriptLibrary.r(New ScriptCommand("item", "remove", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("ItemID", ArgumentTypes.Int, False, ""), New ScriptArgument("Amount", ArgumentTypes.Int, True, "1"), New ScriptArgument("showMessage", ArgumentTypes.Bool, True, "true") }), "Removes the given amount of items from the player's inventory. Displays a message afterwards, if ""showMessage"" is true.", ",", False))
ScriptLibrary.r(New ScriptCommand("item", "clearitem", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("ItemID", ArgumentTypes.Int, True, "") }), "Clears all items with the given ID from the player's inventory. Clears the whole inventory if ItemID is empty.", ",", False))
ScriptLibrary.r(New ScriptCommand("item", "messagegive", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("ItemID", ArgumentTypes.Int, False, ""), New ScriptArgument("Amount", ArgumentTypes.Int, True, "1") }), "Displays a message for getting the specified amount of items.", ",", False))
ScriptLibrary.r(New ScriptCommand("item", "repel", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("RepelItemID", ArgumentTypes.Int, New String() { "20", "42", "43" }, False, "") }), "Adds the steps of the repel to the repel steps of the player.", ",", False))
End Sub

Private Shared Sub DoLevel()
ScriptLibrary.r(New ScriptCommand("level", "wait", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("ticks", ArgumentTypes.Int, False, "") }), "Makes the level idle for the duration of the given ticks.", ",", False))
ScriptLibrary.r(New ScriptCommand("level", "update", "Updates the level and all entities once."))
ScriptLibrary.r(New ScriptCommand("level", "waitforevents", "Makes the level idle until every NPC movement is done."))
ScriptLibrary.r(New ScriptCommand("level", "waitforsave", "Makes the level idle until the current saving of an GameJolt save is done."))
ScriptLibrary.r(New ScriptCommand("level", "reload", "Reloads the current map."))
ScriptLibrary.r(New ScriptCommand("level", "setsafari", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("safari", ArgumentTypes.Bool, False, "") }), "Sets if the current map is a Safari Zone (influences battle style).", ",", False))
ScriptLibrary.r(New ScriptCommand("level", "mapfile", "str", "Returns the mapfile of the currently loaded map.", ",", True))
ScriptLibrary.r(New ScriptCommand("level", "levelfile", "str", "Returns the mapfile of the currently loaded map.", ",", True))
ScriptLibrary.r(New ScriptCommand("level", "filename", "str", "Returns only the name of the current map file, without path and extension.", ",", True))
ScriptLibrary.r(New ScriptCommand("level", "riding", "bool", "Returns if the player is riding a Pokémon right now.", ",", True))
ScriptLibrary.r(New ScriptCommand("level", "surfing", "bool", "Returns if the player is suring on a Pokémon right now.", ",", True))
End Sub

Private Shared Sub DoMath()
ScriptLibrary.r(New ScriptCommand("math", "int", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Converts the argument to an integer.", "", True))
ScriptLibrary.r(New ScriptCommand("math", "sng", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Converts the argument to a single.", "", True))
ScriptLibrary.r(New ScriptCommand("math", "abs", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Sng, False, "") }), "Returns the absolute value of a number.", "", True))
ScriptLibrary.r(New ScriptCommand("math", "ceiling", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Sng, False, "") }), "Rounds the value up to the next integer.", "", True))
ScriptLibrary.r(New ScriptCommand("math", "floor", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Sng, False, "") }), "Rounds the value down to the next integer.", "", True))
ScriptLibrary.r(New ScriptCommand("math", "isint", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Checks if the expression is an integer.", "", True))
ScriptLibrary.r(New ScriptCommand("math", "issng", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Checks if the expression is a single.", "", True))
ScriptLibrary.r(New ScriptCommand("math", "clamp", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("number", ArgumentTypes.Sng, False, ""), New ScriptArgument("min", ArgumentTypes.Sng, False, ""), New ScriptArgument("max", ArgumentTypes.Sng, False, "") }), "Clamps a number.", "", True))
ScriptLibrary.r(New ScriptCommand("math", "rollover", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("number", ArgumentTypes.Sng, False, ""), New ScriptArgument("min", ArgumentTypes.Sng, False, ""), New ScriptArgument("max", ArgumentTypes.Sng, False, "") }), "Rolls a number over with min and max properties.", "", True))
End Sub

Private Shared Sub DoMusic()
ScriptLibrary.r(New ScriptCommand("music", "play", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("musicFile", ArgumentTypes.Str, False, "") }), "Changes the currently playing music to a new one.", ",", False))
ScriptLibrary.r(New ScriptCommand("music", "setmusicloop", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("musicFile", ArgumentTypes.Str, False, "") }), "Sets the map musicloop to a new musicfile.", ",", False))
ScriptLibrary.r(New ScriptCommand("music", "stop", "Stops the music playback."))
ScriptLibrary.r(New ScriptCommand("music", "pause", "Pauses the music playback."))
ScriptLibrary.r(New ScriptCommand("music", "resume", "Resumes the music playback."))
End Sub

Private Shared Sub DoNPC()
ScriptLibrary.r(New ScriptCommand("npc", "remove", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Removes the selected NPC from the map.", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "position", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Moves the selected NPC to a different place on the map. To get relative coordinates, enter a ""~"".", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "warp", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Moves the selected NPC to a different place on the map. To get relative coordinates, enter a ""~"".", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "addtoposition", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Adds the given coordinates to the position of the given NPC. To get relative coordinates, enter a ""~"".", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "register", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("registerData", ArgumentTypes.Str, False, "") }), "Registers NPC data. Format: {MapFile|NPCID|Action(""position"",""remove"")|addition)", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "unregister", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("registerData", ArgumentTypes.Str, False, "") }), "Unregisters NPC data. Format: {MapFile|NPCID|Action(""position"",""remove"")|addition)", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "wearskin", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("skin", ArgumentTypes.Str, False, "") }), "Sets the skin of the selected NPC.", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "move", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("steps", ArgumentTypes.Int, False, "") }), "Starts NPC movement of the selected NPC.", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "setMoveY", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("steps", ArgumentTypes.Int, False, "") }), "Sets the steps the selected NPC should walk in the Y direction.", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "moveasync", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("steps", ArgumentTypes.Int, False, "") }), "Starts async NPC movement of the selected NPC.", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "turn", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("facing", ArgumentTypes.Int, False, "") }), "Sets the face direction of the selected NPC.", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "spawn", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, ""), New ScriptArgument("actionValue", ArgumentTypes.Int, True, "0"), New ScriptArgument("additionalValue", ArgumentTypes.Str, True, ""), New ScriptArgument("TextureID", ArgumentTypes.Str, True, "0"), New ScriptArgument("AnimateIdle", ArgumentTypes.Bool, True, "false"), New ScriptArgument("Rotation", ArgumentTypes.Int, True, "0"), New ScriptArgument("Name", ArgumentTypes.Str, True, ""), New ScriptArgument("npcID", ArgumentTypes.Int, True, "0"), New ScriptArgument("Movement", ArgumentTypes.Str, New String() { "Pokeball", "Still", "Looking", "FacePlayer", "Walk", "Straight", "Turning" }, True, "Still") }), "Spawns a new NPC with the given conditions.", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "setspeed", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, ""), New ScriptArgument("speed", ArgumentTypes.Sng, False, "") }), "Sets the speed of an NPC. The default is ""1"".", ",", False))
ScriptLibrary.r(New ScriptCommand("npc", "position", "sngArr", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the position of the selected NPC.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "exists", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns if an NPC with the given ID exists on the map.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "ismoving", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns if the selected NPC is moving.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "moved", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the amount of steps the selected NPC still has to move.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "skin", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the skin of the selected NPC.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "facing", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the direction the selected NPC is facing.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "ID", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the NPC ID for the selected NPC.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "name", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the name of the selected NPC.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "action", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the action value of the selected NPC.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "additionalvalue", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the additional value of the selected NPC.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "movement", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns the movement type of the selected NPC.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "hasmoverectangles", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("npcID", ArgumentTypes.Int, False, "") }), "Returns if the selected NPC has any movement rectangles.", ",", True))
ScriptLibrary.r(New ScriptCommand("npc", "trainertexture", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("trainerfile", ArgumentTypes.Str, False, "") }), "Returns the texture name of the given trainer. Trainer file starts at the ""Trainer\"" path and must not have the "".trainer"" extension.", ",", True))
End Sub

Private Shared Sub DoOptions()
ScriptLibrary.r(New ScriptCommand("options", "show", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("options", ArgumentTypes.StrArr, False, ""), New ScriptArgument("flag", ArgumentTypes.Str, New String() { "[TEXT=FALSE]" }, True, "") }), "Displays a choose box with the given options.", ",", False))
ScriptLibrary.r(New ScriptCommand("options", "setcancelindex", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("index", ArgumentTypes.Int, False, "") }), "Sets the cancel index of the next choose box. This index gets choosen when the player presses a back key.", ",", False))
End Sub

Private Shared Sub DoPhone()
ScriptLibrary.r(New ScriptCommand("phone", "callflag", "str", "Returns, if the Pokégear is calling or getting called. Values: ""calling"", ""receiving""", ",", True))
ScriptLibrary.r(New ScriptCommand("phone", "got", "bool", "Returns if the player got the Pokégear.", ",", True))
End Sub

Private Shared Sub DoPlayer()
ScriptLibrary.r(New ScriptCommand("player", "receivepokedex", "Makes the Pokédex accessible for the player."))
ScriptLibrary.r(New ScriptCommand("player", "receivepokegear", "Makes the Pokégear accessible for the player."))
ScriptLibrary.r(New ScriptCommand("player", "renamerival", "Opens the rival rename screen."))
ScriptLibrary.r(New ScriptCommand("player", "wearskin", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("skin", ArgumentTypes.Str, False, "") }), "Changes the player skin.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "setonlineskin", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("gamejoltID", ArgumentTypes.Str, False, "") }), "Changes the player skin to a skin downloaded for the GameJoltID.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "move", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("steps", ArgumentTypes.Sng, False, "") }), "Starts the player movement.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "moveasync", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("steps", ArgumentTypes.Str, False, "") }), "Starts the async player movement.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "turn", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("turns", ArgumentTypes.Int, False, "") }), "Adds to the direction the player faces and starts the turning.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "turnasync", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("turns", ArgumentTypes.Int, False, "") }), "Adds to the direction the player faces and starts the async turning.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "turnto", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("facing", ArgumentTypes.Int, False, "") }), "Changes the direction the player faces and starts the turning.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "turntoasync", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("facing", ArgumentTypes.Int, False, "") }), "Changes the direction the player faces and starts the async turning.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "warp", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("mapfile", ArgumentTypes.Str, False, "") }), "Warps the player to a new map file.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "warp", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Warps the player to a new location on the map. To get relative coordinates, enter a ""~"".", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "warp", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("mapfile", ArgumentTypes.Str, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, "") }), "Warps the player to a new location on a new map. To get relative coordinates, enter a ""~"".", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "warp", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("mapfile", ArgumentTypes.Str, False, ""), New ScriptArgument("x", ArgumentTypes.Sng, False, ""), New ScriptArgument("y", ArgumentTypes.Sng, False, ""), New ScriptArgument("z", ArgumentTypes.Sng, False, ""), New ScriptArgument("facing", ArgumentTypes.Int, False, "") }), "Warps the player to a new location on a new map and changes the facing afterwards. To get relative coordinates, enter a ""~"".", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "stopmovement", "Stops the player movement."))
ScriptLibrary.r(New ScriptCommand("player", "addmoney", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("amount", ArgumentTypes.Int, False, "") }), "Adds the given amount to the player's money.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "setmovement", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("x", ArgumentTypes.Int, False, ""), New ScriptArgument("y", ArgumentTypes.Int, False, ""), New ScriptArgument("z", ArgumentTypes.Int, False, "") }), "Sets the direction the player will move next regardless of facing.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "resetmovement", "Resets the player movement to the default movement directions."))
ScriptLibrary.r(New ScriptCommand("player", "getbadge", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("badgeID", ArgumentTypes.Int, False, "") }), "Adds the given badge to the player's badges and displays a message.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "achieveemblem", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("emblemName", ArgumentTypes.Str, False, "") }), "Makes the player achieve an emblem (GameJolt only).", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "addbp", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("amount", ArgumentTypes.Int, False, "") }), "Adds the given amount to the player's BattlePoints.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "showrod", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("rodID", ArgumentTypes.Int, New String() { "0-2" }, False, "") }), "Displays a rod on the screen.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "hiderod", "Hides the fishing rod."))
ScriptLibrary.r(New ScriptCommand("player", "showpokemonfollow", "Shows up the following Pokémon."))
ScriptLibrary.r(New ScriptCommand("player", "hidepokemonfollow", "Hides the following Pokémon."))
ScriptLibrary.r(New ScriptCommand("player", "togglepokemonfollow", "Toggles the following Pokémon's visibility."))
ScriptLibrary.r(New ScriptCommand("player", "save", "Saves the game."))
ScriptLibrary.r(New ScriptCommand("player", "setrivalname", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, "") }), "Sets the rival's name.", ",", False))
ScriptLibrary.r(New ScriptCommand("player", "position", "sngarr", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("coordinate", ArgumentTypes.StrArr, New String() { "x", "y", "z" }, True, "") }), "Returns the position of the player. The normal coordinate combination is ""x,y,z"".", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "hasbadge", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("badgeID", ArgumentTypes.Int, False, "") }), "Returns if the player owns a specific badge.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "skin", "str", "Returns the current skin the player wears.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "velocity", "sng", "Returns the player's velocity (steps until the player movement ends).", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "ismoving", "bool", "Returns if the player moves.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "facing", "int", "Returns the direction the player is facing.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "compass", "str", "Returns ""north"", ""east"", ""south"" or ""east"" depending on the direction the player is facing.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "money", "int", "Returns the player's money.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "name", "str", "Returns the player's name", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "gender", "int", "Returns the player's gender (0=male, 1=female)", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "bp", "int", "Returns the amount of BattlePoints the player owns.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "badges", "int", "Returns the amount of badges the player owns", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "thirdperson", "bool", "Returns if the game is currently played in third person.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "rival", "str", "Returns the rival's name.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "rivalname", "str", "Returns the rival's name.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "ot", "str", "Returns the player's OT.", ",", True))
ScriptLibrary.r(New ScriptCommand("player", "gamejoltid", "str", "Returns the player's GameJoltID.", ",", True))
End Sub

Private Shared Sub DoPokedex()
ScriptLibrary.r(New ScriptCommand("pokedex", "setautodetect", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("autodetect", ArgumentTypes.Bool, False, "") }), "Sets if the Pokédex registers seen Pokémon in wild or trainer battles.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokedex", "caught", "int", "Returns the amount of Pokémon registered as caught by the player.", "", True))
ScriptLibrary.r(New ScriptCommand("pokedex", "seen", "int", "Returns the amount of Pokémon registered as seen by the player.", "", True))
ScriptLibrary.r(New ScriptCommand("pokedex", "shiny", "int", "Returns the amount of Pokémon registered as shiny by the player.", "", True))
End Sub

Private Shared Sub DoPokemon()
ScriptLibrary.r(New ScriptCommand("pokemon", "cry", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonID", ArgumentTypes.Int, False, "") }), "Plays the cry of the given Pokémon.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "remove", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Removes the Pokémon at the given party index.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "add", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonData", ArgumentTypes.PokemonData, False, "") }), "Adds the Pokémon to the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "add", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("method", ArgumentTypes.Str, True, "random reason"), New ScriptArgument("ballID", ArgumentTypes.Int, True, "5"), New ScriptArgument("location", ArgumentTypes.Str, True, "Current location"), New ScriptArgument("isEgg", ArgumentTypes.Bool, True, "false"), New ScriptArgument("trainerName", ArgumentTypes.Str, True, "Current TrainerName") }), "Adds the Pokémon with the given arguments to the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setadditionalvalue", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("data", ArgumentTypes.Str, False, "") }), "Set the additional data for a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setadditionaldata", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("data", ArgumentTypes.Str, False, "") }), "Set the additional data for a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setnickname", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("nickName", ArgumentTypes.Str, False, "") }), "Set the nick name for a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setstat", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("statName", ArgumentTypes.Str, New String() { "maxhp", "hp", "chp", "atk", "attack", "def", "defense", "spatk", "specialattack", "spattack", "spdef", "specialdefense", "spdefense", "speed" }, False, ""), New ScriptArgument("statValue", ArgumentTypes.Int, False, "") }), "Set the value of a stat for a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "clear", "Clears the player's party."))
ScriptLibrary.r(New ScriptCommand("pokemon", "removeattack", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("attackIndex", ArgumentTypes.Int, False, "") }), "Removes the move at the given index from a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "clearattacks", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Clears all moves from a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "addattack", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("attackID", ArgumentTypes.Int, False, "") }), "Adds the move to a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setshiny", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("shiny", ArgumentTypes.Bool, False, "") }), "Sets the shiny value of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "changelevel", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("newLevel", ArgumentTypes.Int, False, "") }), "Sets the level of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "gainexp", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("expAmount", ArgumentTypes.Int, False, "") }), "Adds Experience to the Experience value of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setnature", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("natureID", ArgumentTypes.Int, New String() { "0-24" }, False, "") }), "Sets the Nature of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "npcTrade", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("ownPokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("oppPokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("genderID", ArgumentTypes.Int, New String() { "0-2" }, False, ""), New ScriptArgument("attackIDs", ArgumentTypes.IntArr, False, ""), New ScriptArgument("shiny", ArgumentTypes.Bool, False, ""), New ScriptArgument("OT", ArgumentTypes.Str, False, ""), New ScriptArgument("TrainerName", ArgumentTypes.Str, False, ""), New ScriptArgument("CatchBallID", ArgumentTypes.Int, False, ""), New ScriptArgument("ItemID", ArgumentTypes.Int, False, ""), New ScriptArgument("location", ArgumentTypes.Str, False, ""), New ScriptArgument("method", ArgumentTypes.Str, False, ""), New ScriptArgument("nickname", ArgumentTypes.Str, False, ""), New ScriptArgument("message1", ArgumentTypes.Str, False, ""), New ScriptArgument("message2", ArgumentTypes.Str, False, ""), New ScriptArgument("register", ArgumentTypes.Str, False, "") }), "Trades a Pokémon with an NPC.", "|", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "hide", "Hides the following Pokémon."))
ScriptLibrary.r(New ScriptCommand("pokemon", "rename", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Str, New String() { "0-5", "last" }, False, ""), New ScriptArgument("OTcheck", ArgumentTypes.Bool, False, "") }), "Opens the NameRater rename feature.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "read", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Str, New String() { "[empty],0-5" }, False, "") }), "Displays the reader's dialogue.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "heal", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndicies", ArgumentTypes.IntArr, False, "") }), "Heals the given Pokémon.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setfriendship", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Str, False, ""), New ScriptArgument("friendship", ArgumentTypes.Int, False, "") }), "Sets the friendship value for a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "addfriendship", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Str, False, ""), New ScriptArgument("friendship", ArgumentTypes.Int, False, "") }), "Adds to the frienship of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "select", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("canExit", ArgumentTypes.Bool, False, ""), New ScriptArgument("canChooseEgg", ArgumentTypes.Bool, False, ""), New ScriptArgument("canChooseFainted", ArgumentTypes.Bool, False, "") }), "Opens the Pokémon select screen.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "selectmove", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("canChooseHMMove", ArgumentTypes.Bool, False, ""), New ScriptArgument("canExit", ArgumentTypes.Bool, False, "") }), "Opens the Move Selection screen.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "calcStats", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Recalculates the stats for the given Pokémon.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "learnAttack", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("attackID", ArgumentTypes.Int, False, "") }), "Adds the move to the Pokémon's learnset.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setgender", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("genderID", ArgumentTypes.Int, New String() { "0-2" }, False, "") }), "Sets a Pokémon's gender.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setability", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("abilityID", ArgumentTypes.Int, New String() { "0-188" }, False, "") }), "Sets the ability of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setev", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("evStat", ArgumentTypes.Str, New String() { "hp", "atk", "attack", "def", "defense", "spatk", "specialattack", "spattack", "spdef", "specialdefense", "spdefense", "speed" }, False, ""), New ScriptArgument("evValue", ArgumentTypes.Int, False, "") }), "Sets the value of the EV stat of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setiv", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("ivStat", ArgumentTypes.Str, New String() { "hp", "atk", "attack", "def", "defense", "spatk", "specialattack", "spattack", "spdef", "specialdefense", "spdefense", "speed" }, False, ""), New ScriptArgument("ivValue", ArgumentTypes.Int, False, "") }), "Sets the value of the IV stat of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "registerhalloffame", "Registers the current party as new Hall of Fame entry."))
ScriptLibrary.r(New ScriptCommand("pokemon", "setOT", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("newOT", ArgumentTypes.Str, False, "") }), "Sets the OT of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setItem", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("itemID", ArgumentTypes.Int, False, "") }), "Sets the item of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setItemData", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("itemData", ArgumentTypes.Str, False, "") }), "Sets the data of the item of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setcatchtrainer", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("catchTrainer", ArgumentTypes.Str, False, "") }), "Sets the Catch Trainer of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setcatchball", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("ballID", ArgumentTypes.Int, False, "") }), "Sets the Catch Ball of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setcatchmethod", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("method", ArgumentTypes.Str, False, "") }), "Sets the Catch Method of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setcatchplace", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("location", ArgumentTypes.Str, False, "") }), "Sets the Catch Location of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "setcatchlocation", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("location", ArgumentTypes.Str, False, "") }), "Sets the Catch Location of a Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "newroaming", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("regionID", ArgumentTypes.Int, False, ""), New ScriptArgument("startMap", ArgumentTypes.Str, False, "") }), "Adds a new roaming Pokémon to the list of roaming Pokémon.", "|", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "evolve", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("evolutionTrigger", ArgumentTypes.Str, New String() { "level", "none", "item", "trade" }, True, "level"), New ScriptArgument("evolutionArgument", ArgumentTypes.Str, True, "") }), "Tries to evolve a Pokémon with the given conditions.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "reload", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Reloads the data for a Pokémon in the player's party to apply changes.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "clone", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Clones the given Pokémon in the player's party.", ",", False))
ScriptLibrary.r(New ScriptCommand("pokemon", "id", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the ID of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "number", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the ID of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "data", "pokemonData", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the save data for a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "level", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the level of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "hasfullhp", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns if a Pokémon in the player's party has full HP.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "hp", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the HP of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "atk", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the atk stat of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "def", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the def stat of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "spatk", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the spatk stat of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "spdef", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the spdef stat of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "speed", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the speed stat of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "maxhp", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the max hp of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "isegg", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Pokémon in the players party is an egg.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "additionaldata", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the additional data for the Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "nickname", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the nick name of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "name", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the name of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "ot", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the OT of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "trainer", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the trainer of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "itemid", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the ID of the item of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "friendship", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the friendship value of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "itemname", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the item name of the item of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "catchball", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the ID of the Pokéball the Pokémon was caught in.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "catchmethod", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the method the Pokémon was caught.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "catchlocation", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the location the Pokémon was caught in.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "hasattack", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("attackID", ArgumentTypes.Int, False, "") }), "Returns if the Pokémon in the player's party knows the specified move.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "countattacks", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Counts the moves the Pokémon knows.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "attackname", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("moveIndex", ArgumentTypes.Int, False, "") }), "Returns the name of the move of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "isShiny", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns if the Pokémon is shiny.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "nature", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the nature of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "ownpokemon", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns if a Pokémon in the player's party was caught by the player.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "islegendary", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns if a Pokémon in the player's party is a legendary Pokémon.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "freeplaceinparty", "bool", "Checks if the player has a free place in their party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "nopokemon", "bool", "Checks if the player has no Pokémon in their party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "count", "int", "Returns the amount of Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "countbattle", "int", "Returns the amount Pokémon that can battle in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "has", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonID", ArgumentTypes.Int, False, "") }), "Returns if the player has the specified Pokémon in their party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "selected", "int", "Returns the index of the selector in the player's party. (Set with @pokemon.select)", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "selectedmove", "int", "Returns the index of the move selected. (Set with @pokemon.selectmove)", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "hasegg", "bool", "Returns if the player has an egg in their party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "maxpartylevel", "int", "Returns the maximum level a Pokémon has in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "evhp", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the HP EVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "evatk", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Attack EVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "evdef", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Defense EVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "evspatk", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Special Attack EVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "evspdef", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Special Defense EVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "evspeed", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Speed EVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "ivhp", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the HP IVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "ivatk", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Attack IVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "ivdef", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Defense IVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "ivspatk", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Special Attack IVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "ivspdef", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the Special Defense IVs of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "spawnwild", "pokemonData", "Returns the data for a Pokémon that can spawn in the current location.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "itemdata", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the data of the item of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "countHallofFame", "int", "Counts the Hall of Fame entries.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "learnedTutorMove", "bool", "Returns if a Pokémon just learned a tutor move (from @screen.teachmoves)", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "totalexp", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the amount of Experience a Pokémon received.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "needexp", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the amount of Experience a Pokémon needs in order to level up.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "currentexp", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the amount of Experience the Pokémon colleted for its current level.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "generateFrontier", "pokemonData", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("level", ArgumentTypes.Int, False, ""), New ScriptArgument("pokemonClass", ArgumentTypes.Int, False, ""), New ScriptArgument("IDList", ArgumentTypes.IntArr, True, "") }), "Generates a Frontier Pokémon within the set IDList (all Pokémon, if IDList is Nothing).", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "spawnwild", "pokemonData", "Returns the data for a Pokémon that can spawn in the current location.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "spawn", "pokemonData", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonID", ArgumentTypes.Int, False, ""), New ScriptArgument("level", ArgumentTypes.Int, False, "") }), "Returns the data for a Pokémon.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "OTmatch", "bool,int,str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("checkOT", ArgumentTypes.Str, False, ""), New ScriptArgument("returnType", ArgumentTypes.Str, New String() { "has", "id", "number", "name", "maxhits" }, False, "") }), "Returns if the player owns a Pokémon with the given OT.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "randomOT", "str", "Returns a random OT (5 digit number).", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "status", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the status condition of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "canevolve", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("evolutionTrigger", ArgumentTypes.Str, New String() { "level", "none", "item", "trade" }, True, "level"), New ScriptArgument("evolutionArgument", ArgumentTypes.Str, True, "") }), "Returns if the Pokémon can be evolved via the given evolution method.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "type1", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the first type of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "type2", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, "") }), "Returns the second type of a Pokémon in the player's party.", ",", True))
ScriptLibrary.r(New ScriptCommand("pokemon", "istype", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("type", ArgumentTypes.Str, False, "") }), "Checks if a Pokémon in the player's party has a specific type.", ",", True))
End Sub

Private Shared Sub DoRadio()
ScriptLibrary.r(New ScriptCommand("radio", "allowchannel", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("channel", ArgumentTypes.Sng, False, "") }), "Allows a channel on the map.", ",", False))
ScriptLibrary.r(New ScriptCommand("radio", "blockchannel", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("channel", ArgumentTypes.Sng, False, "") }), "Blocks a channel on the map.", ",", False))
ScriptLibrary.r(New ScriptCommand("radio", "currentchannel", "str", "Returns the name of the channel that is currently playing.", "", True))
End Sub

Private Shared Sub DoRegister()
ScriptLibrary.r(New ScriptCommand("register", "register", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, "") }), "Registers a new register with the given name.", ",", False))
ScriptLibrary.r(New ScriptCommand("register", "register", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("type", ArgumentTypes.Str, New String() { "str", "int", "sng", "bool" }, False, ""), New ScriptArgument("value", ArgumentTypes.Str, False, "") }), "Registers a new register with the given name, type and value.", ",", False))
ScriptLibrary.r(New ScriptCommand("register", "unregister", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, "") }), "Unregisters a register with the given name.", ",", False))
ScriptLibrary.r(New ScriptCommand("register", "unregister", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("type", ArgumentTypes.Str, New String() { "str", "int", "sng", "bool" }, False, "") }), "Unregisters a register with the given name and type that has a value.", ",", False))
ScriptLibrary.r(New ScriptCommand("register", "registertime", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("time", ArgumentTypes.Int, False, ""), New ScriptArgument("timeFormat", ArgumentTypes.Str, New String() { "days", "hours", "minutes", "seconds", "years", "weeks", "months", "dayofweek" }, False, "") }), "Registers a time based register.", ",", False))
ScriptLibrary.r(New ScriptCommand("register", "registered", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, "") }), "Checks if a register with the given name is registered.", ",", True))
ScriptLibrary.r(New ScriptCommand("register", "count", "int", "Counts all registers.", ",", True))
ScriptLibrary.r(New ScriptCommand("register", "type", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, "") }), "Returns the type of a register with the given name.", ",", True))
ScriptLibrary.r(New ScriptCommand("register", "value", "str,int,bool,sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("name", ArgumentTypes.Str, False, "") }), "Returns the value of a register with the given name as its type.", ",", True))
End Sub

Private Shared Sub DoRival()
ScriptLibrary.r(New ScriptCommand("rival", "name", "str", "Returns the rival's name", "", True))
End Sub

Private Shared Sub DoScreen()
ScriptLibrary.r(New ScriptCommand("screen", "storagesystem", "Opens the storage system."))
ScriptLibrary.r(New ScriptCommand("screen", "apricornkurt", "Opens the Apricorn Screen."))
ScriptLibrary.r(New ScriptCommand("screen", "trade", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("tradeItems", ArgumentTypes.ItemCollection, False, ""), New ScriptArgument("canBuy", ArgumentTypes.Bool, False, ""), New ScriptArgument("canSell", ArgumentTypes.Bool, False, "") }), "Opens a new trade screen with the given items in stock. Item collection: {itemID|amount|price}{...}..., amount and price are default for -1", ",", False))
ScriptLibrary.r(New ScriptCommand("screen", "townmap", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("regionList", ArgumentTypes.StrArr, False, "") }), "Opens the map screen with the given regions.", ",", False))
ScriptLibrary.r(New ScriptCommand("screen", "donation", "Opens the donation screen."))
ScriptLibrary.r(New ScriptCommand("screen", "blackout", "Opens the blackout screen and warps the player back to the last saveplace."))
ScriptLibrary.r(New ScriptCommand("screen", "fadein", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("fadeSpeed", ArgumentTypes.Int, True, "5") }), "Fades the screen back in.", ",", False))
ScriptLibrary.r(New ScriptCommand("screen", "fadeout", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("fadeSpeed", ArgumentTypes.Int, True, "5") }), "Fades the screen to black.", ",", False))
ScriptLibrary.r(New ScriptCommand("screen", "credits", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("ending", ArgumentTypes.Str, True, "Johto") }), "Displays a credits scene.", ",", False))
ScriptLibrary.r(New ScriptCommand("screen", "halloffame", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("displayEntryIndex", ArgumentTypes.Int, True, "") }), "Displays the Hall of Fame. If the argument ""displayEntryIndex"" is not empty, it displays only that entry.", ",", False))
ScriptLibrary.r(New ScriptCommand("screen", "teachmoves", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("pokemonIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("moveIDs", ArgumentTypes.IntArr, True, "") }), "Displays a move learn screen. If the argument ""moveIDs"" is left empty, it defaults to the Pokémon's tutor moves.", ",", False))
ScriptLibrary.r(New ScriptCommand("screen", "mailsystem", "Opens the PC Inbox screen."))
ScriptLibrary.r(New ScriptCommand("screen", "pvp", "Opens the PVP lobby screen (not finished yet, don't use)."))
ScriptLibrary.r(New ScriptCommand("screen", "input", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("defaultName", ArgumentTypes.Str, True, ""), New ScriptArgument("inputMode", ArgumentTypes.Str, New String() { "0-2", "name", "text", "numbers" }, True, "0"), New ScriptArgument("currentText", ArgumentTypes.Str, True, ""), New ScriptArgument("maxChars", ArgumentTypes.Int, True, "14") }), "Displays the Input screen. The input can be retrieved with <system.lastinput>.", ",", False))
ScriptLibrary.r(New ScriptCommand("screen", "mysteryevent", "Opens the Mystery Event screen."))
End Sub

Private Shared Sub DoScript()
ScriptLibrary.r(New ScriptCommand("script", "start", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("scriptFile", ArgumentTypes.Str, False, "") }), "Starts a script with the given filename (without file extension).", ",", False))
ScriptLibrary.r(New ScriptCommand("script", "text", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("text", ArgumentTypes.Str, False, "") }), "Starts a script with a simple text to display.", ",", False))
ScriptLibrary.r(New ScriptCommand("script", "run", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("scriptContent", ArgumentTypes.Str, False, "") }), "Runs script content. New lines are represented with ""^"".", ",", False))
End Sub

Private Shared Sub DoSound()
ScriptLibrary.r(New ScriptCommand("sound", "play", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("soundFile", ArgumentTypes.Str, False, ""), New ScriptArgument("stopBackgroundMusic", ArgumentTypes.Bool, True, "false") }), "Plays a sound.", ",", False))
ScriptLibrary.r(New ScriptCommand("sound", "playadvanced", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("soundFile", ArgumentTypes.Str, False, ""), New ScriptArgument("stopBackgroundMusic", ArgumentTypes.Bool, False, ""), New ScriptArgument("pitch", ArgumentTypes.Sng, False, ""), New ScriptArgument("pan", ArgumentTypes.Sng, False, ""), New ScriptArgument("volume", ArgumentTypes.Sng, False, "") }), "Plays a sound with advanced parameters.", ",", False))
End Sub

Private Shared Sub DoStorage()
ScriptLibrary.r(New ScriptCommand("storage", "set", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("type", ArgumentTypes.Str, New String() { "pokemon", "item", "string", "integer", "boolean", "single", "str", "int", "bool", "sng" }, False, ""), New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("value", ArgumentTypes.Str, False, "") }), "Creates or overwrites a storage with the given name and type.", ",", False))
ScriptLibrary.r(New ScriptCommand("storage", "clear", "Clears all storage items."))
ScriptLibrary.r(New ScriptCommand("storage", "update", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("type", ArgumentTypes.Str, New String() { "pokemon", "item", "string", "integer", "boolean", "single", "str", "int", "bool", "sng" }, False, ""), New ScriptArgument("name", ArgumentTypes.Str, False, ""), New ScriptArgument("operation", ArgumentTypes.Str, New String() { "add", "substract", "multiply", "divide" }, False, ""), New ScriptArgument("value", ArgumentTypes.Str, False, "") }), "Updates the value in a storage with the given name and type.", ",", False))
ScriptLibrary.r(New ScriptCommand("storage", "get", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("type", ArgumentTypes.Str, New String() { "pokemon", "item", "string", "integer", "boolean", "single", "str", "int", "bool", "sng" }, False, ""), New ScriptArgument("name", ArgumentTypes.Str, False, "") }), "Returns the value for the storage with the type ""type"" and name ""name"".", ",", True))
ScriptLibrary.r(New ScriptCommand("storage", "count", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("type", ArgumentTypes.Str, New String() { "pokemon", "item", "string", "integer", "boolean", "single", "str", "int", "bool", "sng" }, False, "") }), "Returns the amount of items in the storage for a specific type.", ",", True))
End Sub

Private Shared Sub DoSystem()
ScriptLibrary.r(New ScriptCommand("system", "random", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("min", ArgumentTypes.Int, True, "1"), New ScriptArgument("max", ArgumentTypes.Int, True, "2") }), "Generates a random number between min and max, inclusive.", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "unixtimestamp", "int", "Returns the UNIX timestamp for the current computer time.", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "dayofyear", "int", "Returns the day of the year (Outdated, use <environment.dayofyear> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "year", "int", "Returns the current year (Outdated, use <environment.year> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "booltoint", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("bool", ArgumentTypes.Bool, False, "") }), "Converts a boolean into an integer (Outdated, use <math.int> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "calcint", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Converts the expression to an integer (Outdated, use <math.int> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "int", "int", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Converts the expression to an integer (Outdated, use <math.int> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "calcsng", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Converts the expression to a single (Outdated, use <math.sng> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "sng", "sng", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Converts the expression to a single (Outdated, use <math.sng> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "sort", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("sortMode", ArgumentTypes.Str, New String() { "ascending", "descending" }, False, ""), New ScriptArgument("returnIndex", ArgumentTypes.Int, False, ""), New ScriptArgument("list", ArgumentTypes.Arr, False, "") }), "Sorts the list after sortmode and returns the item at the given index.", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "isinsightscript", "bool", "Returns if the running script was triggred by the inSight function of an NPC.", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "lastinput", "str", "Returns the last input received from the input screen (@screen.input).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "return", "str", "Returns the value set with the "":return"" switch.", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "isint", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Checks if the expression is an integer (Outdated, use <math.isint> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "issng", "bool", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("expression", ArgumentTypes.Str, False, "") }), "Checks if the expression is a single (Outdated, use <math.issng> instead).", ",", True))
ScriptLibrary.r(New ScriptCommand("system", "chrw", "str", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("charCodes", ArgumentTypes.IntArr, False, "") }), "Converts Unicode CharCodes into a string.", ",", True))
End Sub

Private Shared Sub DoText()
ScriptLibrary.r(New ScriptCommand("text", "show", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("text", ArgumentTypes.Str, False, "") }), "Displays a textbox with the given text.", ",", False))
ScriptLibrary.r(New ScriptCommand("text", "setfont", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("font", ArgumentTypes.Str, False, "") }), "Changes the font of the textbox. All fonts from loaded ContentPacks, GameModes and the standard game can be loaded.", ",", False))
ScriptLibrary.r(New ScriptCommand("text", "debug", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("text", ArgumentTypes.Str, False, "") }), "Prints the ""text"" argument to the immediate window console.", ",", False))
ScriptLibrary.r(New ScriptCommand("text", "log", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("text", ArgumentTypes.Str, False, "") }), "Logs the ""text"" argument into the log.dat file.", ",", False))
End Sub

Private Shared Sub DoTitle()
ScriptLibrary.r(New ScriptCommand("title", "add", Enumerable.ToList(Of ScriptArgument)(New ScriptArgument() { New ScriptArgument("text", ArgumentTypes.Str, True, "Sample Text"), New ScriptArgument("delay", ArgumentTypes.Sng, True, "20.0"), New ScriptArgument("R", ArgumentTypes.Int, True, "255"), New ScriptArgument("G", ArgumentTypes.Int, True, "255"), New ScriptArgument("B", ArgumentTypes.Int, True, "255"), New ScriptArgument("scale", ArgumentTypes.Sng, True, "10.0"), New ScriptArgument("isCentered", ArgumentTypes.Bool, True, "true"), New ScriptArgument("x", ArgumentTypes.Sng, True, "0.0"), New ScriptArgument("y", ArgumentTypes.Sng, True, "0.0") }), "Adds a new title for the game to display during gameplay.", ",", False))
ScriptLibrary.r(New ScriptCommand("title", "clear", "Clears all titles that are currently being displayed."))
End Sub